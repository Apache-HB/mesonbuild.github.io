fragment_downloaded_cb({"url": "Builtin-options.html#page-description", "fragment": "Meson provides two kinds of options build options provided by the build files and built in options that are either universal options base options compiler options. \nA list of these options can be found by running meson help. All these can be set by passing to meson aka meson setup in any of these ways option value option value Doption value. \nThey can also be edited after setup using meson configure. \nInstallation options are all relative to the prefix except \nprefix defaults to C on Windows and usr local otherwise. You should always override this value. \nlibdir is automatically detected based on your platform but the implementation is currently buggy on Linux platforms. \nThere are various other options to set for instance the backend to use and the path to the cross file while cross compiling which won t be repeated here. Please see the output of meson help. \nThese are set in the same way as universal options but cannot be shown in the output of meson help because they depend on both the current platform and the compiler that will be selected. The only way to see them is to setup a builddir and then run meson configure on it with no options. \nThe following options are available. Note that they may not be available on all platforms or with all compilers \nThe value of b_sanitize can be one of none address thread undefined memory address undefined. \nb_bitcode will pass fembed bitcode while compiling and will pass Wl bitcode_bundle while linking. These options are incompatible with b_asneeded so that option will be silently disabled. \nShared modules will not have bitcode embedded because Wl bitcode_bundle is incompatible with both bundle and Wl undefined dynamic_lookup which are necessary for shared modules to work. \nSame caveats as base options above. \nThe following options are available. Note that both the options themselves and the possible values they can take will depend on the target platform or compiler being used \nThe default values of c_winlibs and cpp_winlibs are in compiler specific argument forms but the libraries are kernel32 user32 gdi32 winspool shell32 ole32 oleaut32 uuid comdlg32 advapi32. \nc_args cpp_args c_link_args and cpp_link_args only affect native builds when cross compiling they will not be applied to binaries or libraries targeting the host system only those being run on the build system. \n"});