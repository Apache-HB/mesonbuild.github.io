fragment_downloaded_cb({"url":"D.html#page-description","fragment":"Meson has support for compiling D programs. A minimal meson.build\nfile for D looks like this:\nIf you are using the version() feature for conditional compilation,\nyou can use it using the d_module_versions target property:\nFor debugging, debug() conditions are compiled automatically in debug builds, and extra identifiers can be added with the d_debug argument:\nIf you are using embedded unittest functions, your source code needs\nto be compiled twice, once in regular\nmode, and once with unittests active. This is done by setting the\nd_unittest target property to true.\nMeson will only ever pass the respective compiler's -unittest flag,\nand never have the compiler generate an empty main function.\nIf you need that feature in a portable way, create an empty main()\nfunction for unittests yourself, since the GNU D compiler\ndoes not have this feature.\nThis is an example for using D unittests with Meson:\nBuilding D libraries is a straightforward process, not different from\nhow C libraries are built in Meson. You should generate a pkg-config\nfile and install it, in order to make other software on the system\nfind the dependency once it is installed.\nThis is an example on how to build a D shared library:\nIt is important to make the D sources install in a subdirectory in the\ninclude path, in this case /usr/include/d/mylib/mylib.\nAll D compilers include the /usr/include/d directory by default, and\nif your library would be installed into /usr/include/d/mylib, there\nis a high chance that, when you compile your project again on a\nmachine where you installed it, the compiler will prefer the old\ninstalled include over the new version in the source tree, leading to\nvery confusing errors.\nThis is an example of how to use the D library we just built and\ninstalled in an application:\nPlease keep in mind that the library and executable would both need to\nbe built with the exact same D compiler and D compiler version. The D\nABI is not stable across compilers and their versions, and mixing\ncompilers will lead to problems.\nDUB is a fully integrated build system for D, but it is also a way to\nprovide dependencies. Adding dependencies from the D package registry\nis pretty straight forward. You can find how to do this in\nDependencies. You can also automatically\ngenerate a dub.json file as explained in Dlang.\n"});