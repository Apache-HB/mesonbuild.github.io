fragment_downloaded_cb({"url": "D.html#page-description", "fragment": "Meson has support for compiling D programs. A minimal meson.build file for D looks like this \nIf you are using the version feature for conditional compilation you can use it using the d_module_versions target property \nFor debugging debug conditions are compiled automatically in debug builds and extra identifiers can be added with the d_debug argument \nIf you are using embedded unittest functions your source code needs to be compiled twice once in regular mode and once with unittests active. This is done by setting the d_unittest target property to true. Meson will only ever pass the respective compiler s unittest flag and never have the compiler generate an empty main function. If you need that feature in a portable way create an empty main function for unittests yourself since the GNU D compiler does not have this feature. \nThis is an example for using D unittests with Meson \nBuilding D libraries is a straightforward process not different from how C libraries are built in Meson. You should generate a pkg config file and install it in order to make other software on the system find the dependency once it is installed. \nThis is an example on how to build a D shared library \nIt is important to make the D sources install in a subdirectory in the include path in this case usr include d mylib mylib. All D compilers include the usr include d directory by default and if your library would be installed into usr include d mylib there is a high chance that when you compile your project again on a machine where you installed it the compiler will prefer the old installed include over the new version in the source tree leading to very confusing errors. \nThis is an example of how to use the D library we just built and installed in an application \nPlease keep in mind that the library and executable would both need to be built with the exact same D compiler and D compiler version. The D ABI is not stable across compilers and their versions and mixing compilers will lead to problems. \nDUB is a fully integrated build system for D but it is also a way to provide dependencies. Adding dependencies from the D package registry is pretty straight forward. You can find how to do this in Dependencies. You can also automatically generate a dub.json file as explained in Dlang. \n"});