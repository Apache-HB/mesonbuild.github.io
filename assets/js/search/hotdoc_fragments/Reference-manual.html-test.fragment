fragment_downloaded_cb({"url": "Reference-manual.html#test", "fragment": "test \nDefines a test to run with the test harness. Takes two positional arguments the first is the name of the test and the second is the executable to run. The executable can be an executable build target object returned by executable or an external program object returned by find_program The executable s exit code is used by the test harness to record the outcome of the test for example exit code zero indicates success. For more on the Meson test harness protocol read Unit Tests. \nKeyword arguments are the following \nargs arguments to pass to the executable \nenv environment variables to set such as NAME1 value1 NAME2 value2 or an environment object which allows more sophisticated environment juggling \nis_parallel when false specifies that no other test must be running at the same time as this test \nshould_fail when true the test is considered passed if the executable returns a non zero return value i.e. reports an error \nsuite label or list of labels label1 label2 attached to this test. The suite name is qualified by a sub project name resulting in sub project_name label. In the case of a list of strings the suite names will be sub project_name label1 sub project_name label2 etc. \ntimeout the amount of seconds the test is allowed to run a test that exceeds its time limit is always considered failed defaults to seconds \nworkdir absolute path that will be used as the working directory for the test \ndepends specifies that this test depends on the specified target s even though it does not take any of them as a command line argument. This is meant for cases where test finds those targets internally e.g. plugins or globbing. Those targets are built before test is executed even if they have build_by_default false. Since \nDefined tests can be run in a backend agnostic way by calling meson test inside the build dir or by using backend specific commands such as ninja test or msbuild RUN_TESTS.vcxproj. \n"});