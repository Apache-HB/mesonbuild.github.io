fragment_downloaded_cb({"url":"Running-Meson.html#page-description","fragment":"There are two different ways of invoking Meson. First, you can run it directly\nfrom the source tree with the command /path/to/source/meson.py. Meson may\nalso be installed in which case the command is simply meson. In this manual\nwe only use the latter format for simplicity.\nAdditionally, the invocation can pass options to meson. The list of options is\ndocumented here.\nAt the time of writing only a command line version of Meson is available. This\nmeans that Meson must be invoked using the terminal. If you wish to use the\nMSVC compiler, you need to run Meson under \"Visual Studio command prompt\".\nLet us assume that we have a source tree that has a Meson build system. This\nmeans that at the topmost directory has a file called meson.build. We run the\nfollowing commands to get the build started.\nWe invoke Meson with the setup command, giving it the location of the build\ndirectory. Meson uses out of source\nbuilds.\nHint: The syntax of meson is meson [command] [arguments] [options]. The\nsetup command takes a builddir and a srcdir argument. If no srcdir is\ngiven Meson will deduce the srcdir based on pwd and the location of\nmeson.build.\nMeson then loads the build configuration file and writes the corresponding\nbuild backend in the build directory. By default Meson generates a debug\nbuild, which turns on basic warnings and debug information and disables\ncompiler optimizations.\nYou can specify a different type of build with the --buildtype command line\nargument. It can have one of the following values.\nThe build directory is mandatory. The reason for this is that it simplifies the\nbuild process immensely. Meson will not under any circumstances write files\ninside the source directory (if it does, it is a bug and should be fixed). This\nmeans that the user does not need to add a bunch of files to their revision\ncontrol's ignore list. It also means that you can create arbitrarily many build\ndirectories for any given source tree.\nFor example, if we wanted to test building the source code with the Clang\ncompiler instead of the system default, we could just type the following\ncommands:\nThis separation is even more powerful if your code has multiple configuration\noptions (such as multiple data backends). You can create a separate\nsubdirectory for each of them. You can also have build directories for\noptimized builds, code coverage, static analysis and so on. They are all neatly\nseparated and use the same source tree. Changing between different\nconfigurations is just a question of changing to the corresponding directory.\nUnless otherwise mentioned, all following command line invocations are meant to\nbe run in the source directory.\nBy default Meson will use the Ninja backend to build your project. If you wish\nto use any of the other backends, you need to pass the corresponding argument\nduring configuration time. As an example, here is how you would use Meson to\ngenerate a Visual studio solution.\nYou can then open the generated solution with Visual Studio and compile it in\nthe usual way. A list of backends can be obtained with meson setup --help.\nSometimes you want to add extra compiler flags, this can be done by passing\nthem in environment variables when calling meson. See the reference\ntables for\na list of all the environment variables. Be aware however these environment\nvariables are only used for the native compiler and will not affect the\ncompiler used for cross-compiling, where the flags specified in the cross file\nwill be used.\nFurthermore it is possible to stop meson from adding flags itself by using the\n--buildtype=plain option, in this case you must provide the full compiler and\nlinker arguments needed.\nIf you are not using an IDE, Meson uses the Ninja build\nsystem to actually build the code. To start the\nbuild, simply type the following command.\nThe main usability difference between Ninja and Make is that Ninja will\nautomatically detect the number of CPUs in your computer and parallelize itself\naccordingly. You can override the amount of parallel processes used with the\ncommand line argument -j <num processes>.\nIt should be noted that after the initial configure step ninja is the only\ncommand you ever need to type to compile. No matter how you alter your source\ntree (short of moving it to a completely new location), Meson will detect the\nchanges and regenerate itself accordingly. This is especially handy if you have\nmultiple build directories. Often one of them is used for development (the\n\"debug\" build) and others only every now and then (such as a \"static analysis\"\nbuild). Any configuration can be built just by cd'ing to the corresponding\ndirectory and running Ninja.\nMeson provides native support for running tests. The command to do that is\nsimple.\nMeson does not force the use of any particular testing framework. You are free\nto use GTest, Boost Test, Check or even custom executables.\nInstalling the built software is just as simple.\nNote that Meson will only install build targets explicitly tagged as\ninstallable, as detailed in the installing targets\ndocumentation.\nBy default Meson installs to /usr/local. This can be changed by passing the\ncommand line argument --prefix /your/prefix to Meson during configure time.\nMeson also supports the DESTDIR variable used in e.g. building packages. It\nis used like this:\nMeson has a standard command line help feature. It can be accessed with the\nfollowing command.\nMeson exits with status 0 if successful, 1 for problems with the command line\nor meson.build file, and 2 for internal errors.\n\n\n\n value\n meaning\n\n\n\n\n plain\n\n no extra build flags are used, even for compiler warnings, useful for distro packagers and other cases where you need to specify all arguments by yourself\n\n\n debug\n\n debug info is generated but the result is not optimized, this is the default\n\n\n debugoptimized\n\n debug info is generated and the code is optimized (on most compilers this means -g -O2)\n\n\n release\n\n full optimization, no debug info\n\n\n\n"});