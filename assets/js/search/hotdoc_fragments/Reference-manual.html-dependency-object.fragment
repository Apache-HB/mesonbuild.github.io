fragment_downloaded_cb({"url": "Reference-manual.html#dependency-object", "fragment": "dependency object \nThis object is returned by dependency and contains an external dependency with the following methods \nfound which returns whether the dependency was found \nget_pkgconfig_variable varname Added will get the pkg config variable specified or if invoked on a non pkg config dependency error out. Added You can also redefine a variable by passing a list to the define_variable parameter that can affect the retrieved variable prefix Added A warning is issued if the variable is not defined unless a default parameter is specified. \nget_configtool_variable varname Added will get the command line argument from the config tool with prepended or if invoked on a non config tool dependency error out. \ntype_name which returns a string describing the type of the dependency the most common values are internal for deps created with declare_dependency and pkgconfig for system dependencies obtained with Pkg config. \nversion is the version number as a string for example \npartial_dependency compile_args false link_args false links false includes false source false added returns a new dependency object with the same name version found status type name and methods as the object that called it. This new object will only inherit other attributes from its parent as controlled by keyword arguments. \nIf the parent has any dependencies those will be applied to the new partial dependency with the same rules. So given \ndep3 will add Werror foo Werror bar to the compiler args of any target it is added to but libfoo will not be added to the link_args. \nThe following arguments will add the following attributes \n"});