fragment_downloaded_cb({"url": "Release-notes-for-0-50-0.html#page-description", "fragment": "The CMake dependency backend can now make use of existing Find name cmake files by setting the CMAKE_MODULE_PATH with the new dependency property cmake_module_path. The paths given to cmake_module_path should be relative to the project source directory. \nFurthermore the property cmake_args was added to give CMake additional parameters. \nNvidia PGI C C and Fortran no cost compilers are now supported. They have been tested on Linux so far. \nFortran coarray support was added via dependency coarray \nPreviously libdir defaulted to the value of the build machine such as lib x86_64 linux gnu which is almost always incorrect when cross compiling. It now defaults to plain lib when cross compiling. Native builds remain unchanged and will point to the current system s library dir. \nA new paths section has been added to native and cross files. This can be used to set paths such a prefix and libdir in a persistent way. \nAdds support for a warning level which does not enable any static analysis checks from the compiler \nIf you have clang format installed and there is a clang format file in the root of your master project Meson will generate a run target called clang format so you can reformat all files with one command \nExternalProgram objects as well as the object returned by the python3 module provide this method but the new python module did not. \nThis resolves ticket where a generator w multiple output nodes printed an empty string to the console \nIt is now possible to run meson introspect buildoptions path to meson.build without a configured build directory. \nRunning buildoptions without a build directory produces the same output as running it with a freshly configured build directory. \nHowever this behavior is not guaranteed if subprojects are present. Due to internal limitations all subprojects are processed even if they are never used in a real meson run. Because of this options for the subprojects can differ. \nThe include_directories keyword argument now accepts plain strings rather than an include directory object. Meson will transparently expand it so that a declaration like this \nIs equivalent to this \nInitial support for Fortran submodule was added where the submodule is in the same or different file than the parent module. The submodule hierarchy specified in the source Fortran code submodule statements are used by Meson to resolve source file dependencies. For example \nThis allows applications interfacing with Meson such as IDEs to know about an overridden subproject directory. \nThe find_library method can now also verify if the library s headers are found in a single call using the has_header method internally. \nAny keyword argument with the header_ prefix passed to find_library will be passed to the has_header method with the prefix removed. \nNetCDF support for C C and Fortran is added via pkg config. \nFlang Fortran compiler support was added. As with other Fortran compilers flang is specified using FC flang meson or similar. \nYou can now specify a not_found_message that will be printed if the specified dependency was not found. The point is to convert constructs that look like this \nInto this \nOr constructs like this \ninto this \nWhich works because the default value of required is true. \nCompiling Cuda source code is now supported though only with the Ninja backend. This has been tested only on Linux for now. \nBecause NVidia s Cuda compiler does not produce d dependency files dependency tracking does not work. \nYou can pass environment object to run_command just like to test \nThe extract_objects function now supports File objects to tell it what to extract. Previously file paths could only be passed as strings. \nAll paths used in the meson introspection JSON format are now absolute. This affects the filename key in the targets introspection and the output of buildsystem files. \nFurthermore the filename and install_filename keys in the targets introspection are now lists of strings with identical length. \nThe target files option is now deprecated since the same information can be acquired from the tragets introspection API. \nThis release adds the functionality to perform some basic modification on the meson.build files from the command line. The currently supported operations are \nFor more information see the rewriter documentation. \nIt is now possible to run meson introspect scan dependencies path to meson.build without a configured build directory to scan for dependencies. \nThe output format is as follows \nThe required keyword specifies whether the dependency is marked as required in the meson.build all dependencies are required by default The conditional key indicates whether the dependency function was called inside a conditional block. In a real meson run these dependencies might not be used thus they may not be required even if the required key is set. The has_fallback key just indicates whether a fallback was directly set in the dependency function. \nIt is now possible to run meson introspect targets path to meson.build without a configured build directory. \nThe generated output is similar to running the introspection with a build directory. However there are some key differences \nThere is no guarantee that the sources list in target_sources is correct. There might be differences due to internal limitations. It is also not guaranteed that all targets will be listed in the output. It might even be possible that targets are listed which won t exist when meson is run normally. This can happen if a target is defined inside an if statement. Use this feature with care. \nMeson introspect can now print the results of multiple introspection commands in a single call. The results are then printed as a single JSON object. \nThe format for a single command was not changed to keep backward compatibility. \nFurthermore the option a all i indent and f force object output were added to print all introspection information in one go format the JSON output the default is still compact JSON and force use the new output format even if only one introspection command was given. \nA complete introspection dump is also stored in the meson info directory. This dump will be re generated each time meson updates the configuration of the build directory. \nAdditionlly the format of meson introspect target was changed \nWith this release it is also possible to get a list of all build options by invoking meson configure with the project source directory or the path to the root meson.build. In this case meson will print the default values of all options. \nHDF5 support is added via pkg config. \nMeson now generates a meson info.json file in the meson info directory to provide introspection information about the latest meson run. This file is updated when the build configuration is changed and the build files are re generated. \n"});