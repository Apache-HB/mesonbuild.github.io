fragment_downloaded_cb({"url":"Fs-module.html#page-description","fragment":"This module provides functions to inspect the file system. It is\navailable starting with version 0.53.0.\nNon-absolute paths are looked up relative to the directory where the\ncurrent meson.build file is.\nIf specified, a leading ~ is expanded to the user home directory.\nTakes a single string argument and returns true if an entity with that\nname exists on the file system. This can be a file, directory or a\nspecial entry such as a device node.\nTakes a single string argument and returns true if a directory with\nthat name exists on the file system. This method follows symbolic\nlinks.\nTakes a single string argument and returns true if an file with that\nname exists on the file system. This method follows symbolic links.\nTakes a single string argument and returns true if the path pointed to\nby the string is a symbolic link.\nThe fs.hash(filename, hash_algorithm) method returns a string containing\nthe hexidecimal hash_algorithm digest of a file.\nhash_algorithm is a string; the available hash algorithms include:\nmd5, sha1, sha224, sha256, sha384, sha512.\nThe fs.size(filename) method returns the size of the file in integer bytes.\nSymlinks will be resolved if possible.\nThe fs.samefile(filename1, filename2) returns boolean true if the input filenames refer to the same file.\nFor example, suppose filename1 is a symlink and filename2 is a relative path.\nIf filename1 can be resolved to a file that is the same file as filename2, then true is returned.\nIf filename1 is not resolved to be the same as filename2, false is returned.\nIf either filename does not exist, an error message is raised.\nExamples:\nThe files need not actually exist yet for this method, as it's just string manipulation.\nThe replace_suffix method is a string manipulation convenient for filename modifications.\nIt allows changing the filename suffix like:\nReturns the parent directory (i.e. dirname).\nReturns the last component of the path (i.e. basename).\n"});