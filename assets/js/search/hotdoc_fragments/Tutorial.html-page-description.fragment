fragment_downloaded_cb({"url": "Tutorial.html#page-description", "fragment": "This page shows from the ground up how to create a Meson build definition for a simple project. Then we expand it to use external dependencies to show how easily they can be integrated into your project. \nThis tutorial has been written mostly for Linux usage. It assumes that you have GTK development libraries available on the system. On Debian derived systems such as Ubuntu they can be installed with the following command \nIt is possible to build the GUI application On other platforms such as Windows and macOS but it requires for you to install the dependency libraries using a dependendy provider of your choice. \nLet s start with the most basic of programs the classic hello example. First we create a file main.c which holds the source. It looks like this. \nThen we create a Meson build description and put it in a file called meson.build in the same directory. Its contents are the following. \nThat is all. We are now ready to build our application. First we need to initialize the build by going into the source directory and issuing the following commands. \nWe create a separate build directory to hold all of the compiler output. Meson is different from some other build systems in that it does not permit in source builds. You must always create a separate build directory. Common convention is to put the default build directory in a subdirectory of your top level source directory. \nWhen Meson is run it prints the following output. \nNow we are ready to build our code. \nOnce that is done we can run the resulting binary. \nThis produces the expected output. \nJust printing text is a bit old fashioned. Let s update our program to create a graphical window instead. We ll use the GTK widget toolkit. First we edit the main file to use GTK The new version looks like this. \nThen we edit the Meson file instructing it to find and use the GTK libraries. \nNow we are ready to build. The thing to notice is that we do not need to recreate our build directory run any sort of magical commands or the like. Instead we just type the exact same command as if we were rebuilding our code without any build system changes. \nOnce you have set up your build directory the first time you don t ever need to run the meson command again. You always just run ninja. Meson will automatically detect when you have done changes to build definitions and will take care of everything so users don t have to care. In this case the following output is produced. \nNote how Meson noticed that the build definition has changed and reran itself automatically. The program is now ready to be run \nThis creates the following GUI application. \n\n"});