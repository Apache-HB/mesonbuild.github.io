fragment_downloaded_cb({"url":"Adding-new-projects-to-wrapdb.html#page-description","fragment":"Each wrap repository has a master branch with only one initial commit and no wrap files.\nAnd that is the only commit ever made on that branch.\nFor every release of a project a new branch is created. The new branch is named after the\nthe upstream release number (e.g. 1.0.0). This branch holds a wrap file for\nthis particular release.\nThere are two types of wraps on WrapDB - regular wraps and wraps with Meson build\ndefinition patches. A wrap file in a repository on WrapDB must have a name upstream.wrap.\nWraps with Meson build definition patches work in much the same way as Debian: we take the unaltered upstream source package and add a new build system to it as a patch. These build systems are stored as Git repositories on GitHub. They only contain build definition files. You may also think of them as an overlay to upstream source.\nWhenever a new commit is pushed into GitHub's project branch, a new wrap is generated\nwith an incremented version number. All the old releases remain unaltered.\nNew commits are always done via GitHub merge requests and must be reviewed by\nsomeone other than the submitter.\nNote that your Git repo with wrap must not contain the subdirectory of the source\nrelease. That gets added automatically by the service. You also must not commit\nany source code from the original tarball into the wrap repository.\nWrapped subprojects are used much like external dependencies. Thus\nthey should have the same name as the upstream projects.\nIf the project provides a pkg-config file, then the repository name should be\nthe same as the pkg-config name. Usually this is the name of the\nproject, such as libpng. Sometimes it is slightly different,\nhowever. As an example the libogg project's chosen pkg-config name is\nogg instead of libogg, which is the reason why the repository is\nnamed plain ogg.\nIf there is no a pkg-config file, the name the project uses/promotes should be used,\nlowercase only (Catch2 -> catch2).\nIf the project already uses Meson build system, then only a wrap file - upstream.wrap\nshould be provided. In other case a Meson build definition patch - a set of meson.build\nfiles - should be also provided.\nCreate an issue on the wrapdb bug tracker\nusing Title and Description below as a template.\nTitle: new wrap: <project_name>\nDescription:\nWait until the new repository or branch is created. A link to the new repository or branch\nwill be posted in a comment to this issue.\nFirst you need to fork the repository to your own page.\nThen you can create the first Wrap commit that usually looks something like this.\nNow you should create a pull request on GitHub. Remember to create it against the\ncorrect branch rather than master (1.0.0 branch in this example). GitHub should do\nthis automatically.\nEach project gets its own repo. It is initialized like this:\nNote that this is the only commit that will ever be made to master branch. All other commits are done to branches.\nRepo names must fully match this regexp: [a-z0-9._]+.\nCreate a new branch whose name matches the upstream release number.\nBranch names must fully match this regexp: [a-z0-9._]+.\nThe point of a wrap is to provide the upstream project with as few\nchanges as possible. Most projects should not contain anything more\nthan a few Meson definition files. Sometimes it may be necessary to\nadd a template header file or something similar. These should be held\nat a minimum.\nIt should especially be noted that there must not be any patches\nto functionality. All such changes must be submitted to upstream. You\nmay also host your own Git repo with the changes if you wish. The Wrap\nsystem has native support for Git subprojects.\nThe WrapDB repository has a\nhelper script\nto generate new repositories, verify them and update them.\nSee Wrap review guidelines.\n"});