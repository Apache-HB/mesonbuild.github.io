fragment_downloaded_cb({"url": "Configuration.html#page-description", "fragment": "If there are multiple configuration options passing them through compiler flags becomes very burdensome. It also makes the configuration settings hard to inspect. To make things easier Meson supports the generation of configure files. This feature is similar to one found in other build systems such as CMake. \nSuppose we have the following Meson snippet \nand that the contents of config.h.in are \nMeson will then create a file called config.h in the corresponding build directory whose contents are the following. \nMore specifically Meson will find all strings of the type varname and replace them with respective values set in conf_data. You can use a single configuration_data object as many times as you like but it becomes immutable after being passed to the configure_file function. That is after it has been used once to generate output the set function becomes unusable and trying to call it causes an error. Copy of immutable configuration_data is still immutable. \nFor more complex configuration file generation Meson provides a second form. To use it put a line like this in your configuration file. \nThe replacement that happens depends on what the value and type of TOKEN is \nNote that if you want to define a C string you need to do the quoting yourself like this \nSince this is such a common operation Meson provides a convenience method \nOften you have a boolean value in Meson but need to define the C C token as or Meson provides a convenience function for this use case. \nIf the input file is not defined then Meson will generate a header file all the entries in the configuration data object. The replacements are the same as when generating mesondefine entries \nIn this mode you can also specify a comment which will be placed before the value so that your generated files are self documenting. \nWill produce \nThe default meson file encoding to configure files is utf If you need to configure a file that is not utf encoded the encoding keyword will allow you to specify which file encoding to use. It is however strongly advised to convert your non utf file to utf whenever possible. Supported file encodings are those of python3 see standard encodings. \nGenerating and using a configuration file requires the following steps \nWe are going to use the traditional approach of generating a header file in the top directory. The common name is config.h but we re going to use an unique name. This avoids the problem of accidentally including the wrong header file when building a project with many subprojects. \nAt the top level we generate the file \nImmediately afterwards we generate the include object. \nFinally we specify this in a target that can be in any subdirectory. \nNow any source file in this target can include the configuration header like this \n"});