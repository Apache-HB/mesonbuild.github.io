fragment_downloaded_cb({"url": "Generating-sources.html#page-description", "fragment": "Sometimes source files need to be preprocessed before they are passed to the actual compiler. As an example you might want build an IDL compiler and then run some files through that to generate actual source files. In Meson this is done with generator or custom_target \nLet s say you have a build target that must be built using sources generated by a compiler. The compiler can either be a built target \nOr an external program provided by the system or script inside the source tree \nCustom targets can take zero or more input files and use them to generate one or more output files. Using a custom target you can run this compiler at build time to generate the sources \nThe INPUT there will be transformed to somefile1.c file2.c Just like the output you can also refer to each input file individually by index. \nThen you just put that in your program and you re done. \nGenerators are similar to custom targets except that we define a generator which defines how to transform an input file into one or more output files and then use that on as many input files as we want. \nNote that generators should only be used for outputs that will only be used as inputs for a build target or a custom target. When you use the processed output of a generator in multiple targets the generator will be run multiple times to create outputs for each target. Each output will be created in a target private directory BUILD_DIR \nIf you want to generate files for general purposes such as for generating headers to be used by several sources or data that will be installed and so on use a custom_target instead. \nThe first argument is the executable file to run. The next file specifies a name generation rule. It specifies how to build the output file name for a given input name. BASENAME is a placeholder for the input file name without preceding path or suffix if any So if the input file name were some path filename.idl then the output name would be filename.c. You can also use PLAINNAME which preserves the suffix which would result in a file called filename.idl.c. The last line specifies the command line arguments to pass to the executable. INPUT and OUTPUT are placeholders for the input and output files respectively and will be automatically filled in by Meson. If your rule produces multiple output files and you need to pass them to the command line append the location to the output holder like this OUTPUT0 OUTPUT1 and so on. \nWith this rule specified we can generate source files and add them to a target. \nGenerators can also generate multiple output files with unknown names \nIn this case you can not use the plain OUTPUT variable as it would be ambiguous. This program only needs to know the output directory it will generate the file names by itself. \nTo make passing different additional arguments to the generator program at each use possible you can use the EXTRA_ARGS string in the arguments list. Note that this placeholder can only be present as a whole string and not as a substring. The main reason is that it represents a list of strings which may be empty or contain multiple elements and in either case interpolating it into the middle of a single string would be troublesome. If there are no extra arguments passed in from a process invocation the placeholder is entirely omitted from the actual list of arguments so an empty string won t be passed to the generator program because of this. If there are multiple elements in extra_args they are inserted into to the actual argument list as separate elements. \n"});