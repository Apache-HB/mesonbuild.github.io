fragment_downloaded_cb({"url":"Release-notes-for-0-47-0.html#page-description","fragment":"Added the function subdir_done(). Its invocation exits the current script at\nthe point of invocation. All previously invoked build targets and commands are\nbuild/executed. All following ones are ignored. If the current script was\ninvoked via subdir() the parent script continues normally.\nAfter obtaining the value of a preprocessor symbol consecutive string literals\nare merged into a single string literal.\nFor example a preprocessor symbol's value \"ab\" \"cd\" is returned as \"abcd\".\nCross-compilation is now supported for ARM targets using ARM compiler\nversion 6 - ARMCLANG.  The required ARMCLANG compiler options for\nbuilding a shareable library are not included in the current Meson\nimplementation for ARMCLANG support, so it can not build shareable\nlibraries.  This current Meson implementation for ARMCLANG support can\nnot build assembly files with arm syntax (we need to use armasm instead\nof ARMCLANG for the .s files with this syntax) and only supports GNU\nsyntax.\nThe default extension of the executable output is .axf.\nThe environment path should be set properly for the ARM compiler executables.\nThe --target, -mcpu options with the appropriate values should be mentioned\nin the cross file as shown in the snippet below.\nNote:\nWhen building with clang on macOS, you can now build your static and shared\nbinaries with embedded bitcode by enabling the b_bitcode base\noption by passing -Db_bitcode=true to\nMeson.\nThis is better than passing the options manually in the environment since Meson\nwill automatically disable conflicting options such as b_asneeded, and will\ndisable bitcode support on targets that don't support it such as\nshared_module().\nSince this requires support in the linker, it is currently only enabled when\nusing Apple ld. In the future it can be extended to clang on other platforms\ntoo.\nThe existing compiler check has_header() only checks if the header exists,\neither with the __has_include C++11 builtin, or by running the pre-processor.\nHowever, sometimes the header you are looking for is unusable on some platforms\nor with some compilers in a way that is only detectable at compile-time. For\nsuch cases, you should use check_header() which will include the header and\nrun a full compile.\nNote that has_header() is much faster than check_header(), so it should be\nused whenever possible.\nIn addition to the existing actions configuration: and command:,\nconfigure_file() now accepts a keyword\nargument copy: which specifies a new action to copy the file specified with\nthe input: keyword argument to a file in the build directory with the name\nspecified with the output: keyword argument.\nThese three keyword arguments are, as before, mutually exclusive. You can only\ndo one action at a time.\nAdd a new keyword to configure_file()\nthat allows the developer to specify the input and output file encoding. The\ndefault value is the same as before: UTF-8.\nIn the past, Meson would not handle non-UTF-8/ASCII files correctly, and in the\nworst case would try to coerce it to UTF-8 and mangle the data. UTF-8 is the\nstandard encoding now, but sometimes it is necessary to process files that use\na different encoding.\nFor additional details see #3135.\nWhen called without an input file, configure_file generates a\nC header file by default. A keyword argument was added to allow\nspecifying the output format, for example for use with nasm or yasm:\nThe depfile keyword argument to custom_target now accepts the @BASENAME@\nand @PLAINNAME@ substitutions.\nSetting build_always to true for a custom target not only marks the target\nto be always considered out of date, but also adds it to the set of default\ntargets. This option is therefore deprecated and the new option\nbuild_always_stale is introduced.\nbuild_always_stale only marks the target to be always considered out of\ndate, but does not add it to the set of default targets. The old behaviour can\nbe achieved by combining build_always_stale with build_by_default.\nThe documentation has been updated accordingly.\nMeson dictionaries use a syntax similar to python's dictionaries,\nbut have a narrower scope: they are immutable, keys can only\nbe string literals, and initializing a dictionary with duplicate\nkeys causes a fatal error.\nExample usage:\nPrior to this change passing -Dopt= to an array opt would be interpreted as\n[''] (an array with an empty string), now -Dopt= is the same as -Dopt=[], an\nempty list.\nMeson will now print a WARNING: message during configuration if you use\na function or a keyword argument that was added in a meson version that's newer\nthan the version specified inside project(). For example:\nThis will output:\nA new type of option called feature can be\ndefined in meson_options.txt for the traditional enabled / disabled / auto\ntristate. The value of this option can be passed to the required keyword\nargument of functions dependency(), find_library(), find_program() and\nadd_languages().\nA new global option auto_features has been added to override the value of all\nauto features. It is intended to be used by packagers to have full control on\nwhich feature must be enabled or disabled.\nYou can now pass additional arguments to gdbus-codegen using the extra_args\nkeyword. This is the same for the other gnome function calls.\nMeson now automatically adds autocleanup support to the generated code. This\ncan be modified by setting the autocleanup keyword.\nFor example:\nYou can now run meson install in your build directory and it will do\nthe install. It has several command line options you can toggle the\nbehaviour that is not in the default ninja install invocation. This\nis similar to how meson test already works.\nFor example, to install only the files that have changed, you can do:\nIt is now possible to pass an install_mode argument to all installable targets,\nsuch as executable(), libraries, headers, man pages and custom/generated\ntargets.\nThe install_mode argument can be used to specify the file mode in symbolic\nformat and optionally the owner/uid and group/gid for the installed files.\nThis umask is used to define the default permissions of files and directories\ncreated in the install tree. Files will preserve their executable mode, but the\nexact permissions will obey the install_umask.\nThe install_umask can be overridden in the meson command-line:\nA project can also override the default in the project() call:\nTo disable the install_umask, set it to preserve, in which case permissions\nare copied from the files in their origin.\nOctal and binary integer literals can now be used in build and option files.\nIf check: is true, then the configuration will fail if the command returns a\nnon-zero exit status. The default value is false for compatibility reasons.\nrun_command() used to always capture the output and stored it for use in\nbuild files. However, sometimes the stdout is in a binary format which is meant\nto be discarded. For that case, you can now set the capture: keyword argument\nto false.\nThe compile_resources() function of the windows module now takes\nthe depend_files: and depends: keywords.\nWhen using binutils's windres, dependencies on files #include'd by the\npreprocessor are now automatically tracked.\nWhen running install, if installation fails with a permission error and\npkexec is available, Meson will attempt to use it to spawn a permission\ndialog for privileged installation and retry the installation.\nIf pkexec is not available, the old behaviour is retained and you will need\nto explicitly run the install step with sudo.\n\nThe current changes are tested on Windows only.\nPIC support is not enabled by default for ARM,\nif users want to use it, they need to add the required arguments\nexplicitly from cross-file(c_args/cpp_args) or some other way.\n\n"});