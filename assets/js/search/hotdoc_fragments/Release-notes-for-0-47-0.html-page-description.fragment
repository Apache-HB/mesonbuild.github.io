fragment_downloaded_cb({"url": "Release-notes-for-0-47-0.html#page-description", "fragment": "Allow early return from a script \nConcatenate string literals returned from get_define \nARM compiler version for C and CPP \nNew base build option for LLVM Apple bitcode support \nNew compiler check check_header \nNew action copy for configure_file \nNew keyword argument encoding for configure_file \nNew keyword argument output_format for configure_file \nSubstitutions in custom_target depfile \nDeprecated build_always for custom targets \nNew built in object type dictionary \nArray options treat Dopt and Dopt as equivalent \nFeature detection based on meson_version in project \nNew type of build option for features \nNew options to gnome.gdbus_codegen \nMade install a top level Meson command \ninstall_mode keyword argument extended to all installable targets \nNew built in option install_umask with a default value \nOctal and binary string literals \nNew keyword arguments check and capture for run_command \nWindows resource files dependencies \nAdded the function subdir_done Its invocation exits the current script at the point of invocation. All previously invoked build targets and commands are build executed. All following ones are ignored. If the current script was invoked via subdir the parent script continues normally. \nAfter obtaining the value of a preprocessor symbol consecutive string literals are merged into a single string literal. For example a preprocessor symbol s value ab cd is returned as abcd \nCross compilation is now supported for ARM targets using ARM compiler version ARMCLANG. The required ARMCLANG compiler options for building a shareable library are not included in the current Meson implementation for ARMCLANG support so it can not build shareable libraries. This current Meson implementation for ARMCLANG support can not build assembly files with arm syntax we need to use armasm instead of ARMCLANG for the s files with this syntax and only supports GNU syntax. \nThe default extension of the executable output is axf. The environment path should be set properly for the ARM compiler executables. The target mcpu options with the appropriate values should be mentioned in the cross file as shown in the snippet below. \nNote \nWhen building with clang on macOS you can now build your static and shared binaries with embedded bitcode by enabling the b_bitcode base option by passing Db_bitcode true to Meson. \nThis is better than passing the options manually in the environment since Meson will automatically disable conflicting options such as b_asneeded and will disable bitcode support on targets that don t support it such as shared_module \nSince this requires support in the linker it is currently only enabled when using Apple ld. In the future it can be extended to clang on other platforms too. \nThe existing compiler check has_header only checks if the header exists either with the __has_include C builtin or by running the pre processor. \nHowever sometimes the header you are looking for is unusable on some platforms or with some compilers in a way that is only detectable at compile time. For such cases you should use check_header which will include the header and run a full compile. \nNote that has_header is much faster than check_header so it should be used whenever possible. \nIn addition to the existing actions configuration and command configure_file now accepts a keyword argument copy which specifies a new action to copy the file specified with the input keyword argument to a file in the build directory with the name specified with the output keyword argument. \nThese three keyword arguments are as before mutually exclusive. You can only do one action at a time. \nAdd a new keyword to configure_file that allows the developer to specify the input and output file encoding. The default value is the same as before UTF \nIn the past Meson would not handle non UTF ASCII files correctly and in the worst case would try to coerce it to UTF and mangle the data. UTF is the standard encoding now but sometimes it is necessary to process files that use a different encoding. \nFor additional details see \nWhen called without an input file configure_file generates a C header file by default. A keyword argument was added to allow specifying the output format for example for use with nasm or yasm \nThe depfile keyword argument to custom_target now accepts the BASENAME and PLAINNAME substitutions. \nSetting build_always to true for a custom target not only marks the target to be always considered out of date but also adds it to the set of default targets. This option is therefore deprecated and the new option build_always_stale is introduced. \nbuild_always_stale only marks the target to be always considered out of date but does not add it to the set of default targets. The old behaviour can be achieved by combining build_always_stale with build_by_default. \nThe documentation has been updated accordingly. \nMeson dictionaries use a syntax similar to python s dictionaries but have a narrower scope they are immutable keys can only be string literals and initializing a dictionary with duplicate keys causes a fatal error. \nExample usage \nPrior to this change passing Dopt to an array opt would be interpreted as an array with an empty string now Dopt is the same as Dopt an empty list. \nMeson will now print a WARNING message during configuration if you use a function or a keyword argument that was added in a meson version that s newer than the version specified inside project For example \nThis will output \nA new type of option called feature can be defined in meson_options.txt for the traditional enabled disabled auto tristate. The value of this option can be passed to the required keyword argument of functions dependency find_library find_program and add_languages \nA new global option auto_features has been added to override the value of all auto features. It is intended to be used by packagers to have full control on which feature must be enabled or disabled. \nYou can now pass additional arguments to gdbus codegen using the extra_args keyword. This is the same for the other gnome function calls. \nMeson now automatically adds autocleanup support to the generated code. This can be modified by setting the autocleanup keyword. \nFor example \nYou can now run meson install in your build directory and it will do the install. It has several command line options you can toggle the behaviour that is not in the default ninja install invocation. This is similar to how meson test already works. \nFor example to install only the files that have changed you can do \nIt is now possible to pass an install_mode argument to all installable targets such as executable libraries headers man pages and custom generated targets. \nThe install_mode argument can be used to specify the file mode in symbolic format and optionally the owner uid and group gid for the installed files. \nThis umask is used to define the default permissions of files and directories created in the install tree. Files will preserve their executable mode but the exact permissions will obey the install_umask. \nThe install_umask can be overridden in the meson command line \nA project can also override the default in the project call \nTo disable the install_umask set it to preserve in which case permissions are copied from the files in their origin. \nOctal and binary integer literals can now be used in build and option files. \nIf check is true then the configuration will fail if the command returns a non zero exit status. The default value is false for compatibility reasons. \nrun_command used to always capture the output and stored it for use in build files. However sometimes the stdout is in a binary format which is meant to be discarded. For that case you can now set the capture keyword argument to false. \nThe compile_resources function of the windows module now takes the depend_files and depends keywords. \nWhen using binutils s windres dependencies on files include d by the preprocessor are now automatically tracked. \n"});