fragment_downloaded_cb({"url":"Quick-guide.html#page-description","fragment":"Meson has been designed to be as easy to use as possible. This page\noutlines the basic use cases. For more advanced cases refer to Meson's\ncommand line help which is accessible with the command meson --help.\nMeson has two main dependencies.\nNinja is only needed if you use the Ninja backend. Meson can also\ngenerate native VS and XCode project files.\nOn Ubuntu these can be easily installed with the following command:\nThe best way to get Meson is to pip install it for your user\nYou can also use Meson as packaged by your distro, but beware that due\nto our frequent release cycle and development speed this version might\nbe out of date.\nAnother option is to clone the git repository and run it directly from\nthere.\nThe most common use case of Meson is compiling code on a code base you\nare working on. The steps to take are very simple.\nThe only thing to note is that you need to create a separate build\ndirectory. Meson will not allow you to build source code inside your\nsource tree. All build artifacts are stored in the build\ndirectory. This allows you to have multiple build trees with different\nconfigurations at the same time. This way generated files are not\nadded into revision control by accident.\nTo recompile after code changes, just type ninja. The build command\nis always the same. You can do arbitrary changes to source code and\nbuild system files and Meson will detect those and will do the right\nthing. If you want to build optimized binaries, just use the argument\n--buildtype=debugoptimized when running Meson. It is recommended\nthat you keep one build directory for unoptimized builds and one for\noptimized ones. To compile any given configuration, just go into the\ncorresponding build directory and run ninja.\nMeson will automatically add compiler flags to enable debug\ninformation and compiler warnings (i.e. -g and -Wall). This means\nthe user does not have to deal with them and can instead focus on\ncoding.\nDistro packagers usually want total control on the build flags\nused. Meson supports this use case natively. The commands needed to\nbuild and install Meson projects are the following.\nThe command line switch --buildtype=plain tells Meson not to add its\nown flags to the command line. This gives the packager total control\non used flags.\nThis is very similar to other build systems. The only difference is\nthat the DESTDIR variable is passed as an environment variable\nrather than as an argument to ninja install.\nAs distro builds happen always from scratch, you might consider\nenabling unity builds on your packages because they\nare faster and produce better code. However there are many projects\nthat do not build with unity builds enabled so the decision to use\nunity builds must be done by the packager on a case by case basis.\n\nPython 3\nNinja\n\n"});