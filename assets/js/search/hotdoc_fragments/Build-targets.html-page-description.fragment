fragment_downloaded_cb({"url":"Build-targets.html#page-description","fragment":"Meson provides four kinds of build targets: executables, libraries\n(which can be set to be built as static or shared or both of them at\nthe build configuration time), static libraries, and shared libraries.\nThey are created with the commands executable, library,\nstatic_library and shared_library, respectively. All objects created\nin this way are immutable. That is, you can not change any aspect of\nthem after they have been constructed. This ensures that all information\npertaining to a given build target is specified in one well defined\nplace.\nAs an example, here is how you would build a library.\nIt is generally preferred to use the library command instead of\nshared_library and static_library and then configure which\nlibraries (static or shared or both of them) will be built at the\nbuild configuration time using the default_library\nbuilt-in option.\nIn Unix-like operating systems, shared libraries can be\nversioned. Meson supports this with keyword arguments, which will be\nignored if the library is configured as static at the compile time.\nIt is common to build a library and then an executable that links\nagainst it. This is supported as well.\nMeson sets things up so that the resulting executable can be run\ndirectly from the build directory. There is no need to write shell\nscripts or set environment variables.\nOne target can have multiple language source files.\nSometimes you can't build files from sources but need to utilize an\nexisting object file. A typical case is using an object file provided\nby a third party. Object files can be specified just like sources.\nA different case is when you want to use object files built in one\ntarget directly in another. A typical case is when you build a shared\nlibrary and it has an internal class that is not exported in the\nABI. This means you can't access it even if you link against the\nlibrary. Typical workarounds for this include building both a shared\nand static version of the library or putting the source file in the\ntest executable's source list. Both of these approaches cause the\nsource to be built twice, which is slow.\nIn Meson you can extract object files from targets and use them as-is\non other targets. This is the syntax for it.\nHere we take the internal class object and use it directly in the\ntest. The source file is only compiled once.\nNote that careless use of this feature may cause strange bugs. As an\nexample trying to use objects of an executable or static library in a\nshared library will not work because shared library objects require\nspecial compiler flags. Getting this right is the user's\nresponsibility. For this reason it is strongly recommended that you\nonly use this feature for generating unit test executables in the\nmanner described above.\n"});