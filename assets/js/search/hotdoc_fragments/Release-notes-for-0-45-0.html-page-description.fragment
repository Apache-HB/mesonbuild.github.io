fragment_downloaded_cb({"url": "Release-notes-for-0-45-0.html#page-description", "fragment": "Config Tool based dependencies can be specified in a cross file \nVisual Studio C compiler support \nRemoved two deprecated features \nGenerator outputs can preserve directory structure \ninstall_data defaults to datadir projectname \ninstall_subdir supports strip_directory \nNew method meson.project_license \nRust compiler private library disambiguation \nCan use custom targets as Windows resource files \nCan promote dependencies with wrap command \nYielding subproject option to superproject \nTools like LLVM and pcap use a config tool for dependencies this is a script or binary that is run to get configuration information cflags ldflags etc from. \nThese binaries may now be specified in the binaries section of a cross file. \nIn addition to the Mono C compiler we also support Visual Studio s C compiler. Currently this is only supported on the Ninja backend. \nThe standalone find_library function has been a no op for a long time. Starting with this version it becomes a hard error. \nThere used to be a keywordless version of run_target which looked like this \nThis is now an error. The correct format for this is now \nNormally when generating files with a generator Meson flattens the input files so they all go in the same directory. Some code generators such as Protocol Buffers require that the generated files have the same directory layout as the input files used to generate them. This can now be achieved like this \nThis would cause the following files to be generated inside the target private directory \nIf install_data is not given an install_dir keyword argument the target directory defaults to datadir projectname e.g. usr share myproj \nIf strip_directory true install_subdir installs directory contents instead of directory itself stripping basename of the source directory. \nThe meson builtin object now has a project_license method that returns a list of all licenses for the project. \nWhen building a Rust target with Rust library dependencies an extern argument is now specified to avoid ambiguity between the dependency library and any crates of the same name in rustc s private sysroot. \nThe compile_resources function of the windows module can now be used on custom targets as well as regular files. \nThe promote command makes it easy to copy nested dependencies to the top level. \nThis will search the project tree for a subproject called scommon and copy it to the top level. \nIf there are many embedded subprojects with the same name you have to specify which one to promote manually like this \nNormally project options are specific to the current project. However sometimes you want to have an option whose value is the same over all projects. This can be achieved with the new yield keyword for options. When set to true getting the value of this option in meson.build files gets the value from the option with the same name in the master project if such an option exists \n"});