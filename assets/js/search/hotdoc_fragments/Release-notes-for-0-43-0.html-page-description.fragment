fragment_downloaded_cb({"url":"Release-notes-for-0-43-0.html#page-description","fragment":"The Boost dependency has been improved to better detect the various ways to\ninstall boost on multiple platforms. At the same time the modules semantics\nfor the dependency has been changed. Previously it was allowed to specify\nheader directories as modules but it wasn't required. Now, modules are only\nused to specify libraries that require linking.\nThis is a breaking change and the fix is to remove all modules that aren't\nfound.\nGenerators can now be configured to capture the standard output. See\ntest cases/common/98 gen extra/meson.build for an example.\nThe CustomTarget object can now be indexed like an array. The resulting\nobject can be used as a source file for other Targets, this will create a\ndependency on the original CustomTarget, but will only insert the generated\nfile corresponding to the index value of the CustomTarget's output keyword.\nThe cross file can now be used for overriding the result of\nfind_program. As an example if you want to find the objdump\ncommand and have the following definition in your cross file:\nThen issuing the command find_program('objdump') will return the\nversion specified in the cross file. If you need the build machine's\nobjdump, you can specify the native keyword like this:\nA common pattern for handling multiple desired compiler arguments, was to\ntest their presence and add them to an array one-by-one, e.g.:\nA helper has been added for the foreach/has_argument pattern, so you can\nnow simply do:\nMeson has support for prebuilt object files and static libraries.\nThis release adds feature parity to shared libraries that are either\nin non-standard system paths or shipped as part of your project. On\nsystems that support rpath, Meson automatically adds rpath entries\nto built targets using manually found external libraries.\nThis means that e.g. supporting prebuilt libraries shipped with your\nsource or provided by subprojects or wrap definitions by writing a\nbuild file like this:\nThen you can use the dependency object in the same way as any other.\nThe Wrap dependency system now\nsupports Subversion (svn).  This\nsupport is rudimentary. The repository url has to point to a specific\n(sub)directory containing the meson.build file (typically\ntrunk/). However, providing a revision is supported.\n"});