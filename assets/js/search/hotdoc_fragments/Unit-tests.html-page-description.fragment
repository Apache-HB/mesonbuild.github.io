fragment_downloaded_cb({"url":"Unit-tests.html#page-description","fragment":"Meson comes with a fully functional unit test system. To use it simply build an executable and then use it in a test.\nYou can add as many tests as you want. They are run with the command ninja test.\nMeson captures the output of all tests and writes it in the log file meson-logs/testlog.txt.\nSome tests require the use of command line arguments or environment variables. These are simple to define.\nNote how you need to specify multiple values as an array.\nBy default, environment variable\nMALLOC_PERTURB_\nis set to a random value between 1..255. This can help find memory\nleaks on configurations using glibc, including with non-GCC compilers.\nThis feature can be disabled as discussed in test().\nIf you enable coverage measurements by giving Meson the command line flag\n-Db_coverage=true, you can generate coverage reports after running the tests\n(running the tests is required to gather the list of functions that get\ncalled). Meson will autodetect what coverage generator tools you have installed\nand will generate the corresponding targets. These targets are coverage-xml\nand coverage-text which are both provided by Gcovr\n(version 3.3 or higher) and coverage-html, which requires\nLcov and\nGenHTML or\nGcovr. As a convenience, a high-level coverage target is\nalso generated which will produce all 3 coverage report types, if possible.\nThe output of these commands is written to the log directory meson-logs in your build directory.\nTo reduce test times, Meson will by default run multiple unit tests in parallel. It is common to have some tests which can not be run in parallel because they require unique hold on some resource such as a file or a D-Bus name. You have to specify these tests with a keyword argument.\nMeson will then make sure that no other unit test is running at the same time. Non-parallel tests take longer to run so it is recommended that you write your unit tests to be parallel executable whenever possible.\nBy default Meson uses as many concurrent processes as there are cores on the test machine. You can override this with the environment variable MESON_TESTTHREADS like this.\n(added in version 0.52.0)\nTests can be assigned a priority that determines when a test is started. Tests with higher priority are started first, tests with lower priority started later. The default priority is 0, meson makes no guarantee on the ordering of tests with identical priority.\nNote that the test priority only affects the starting order of tests and subsequent tests are affected by how long it takes previous tests to complete. It is thus possible that a higher-priority test is still running when lower-priority tests with a shorter runtime have completed.\nSometimes a test can only determine at runtime that it can not be run.\nFor the default exitcode testing protocol, the GNU standard approach in this case is to exit the program with error code 77. Meson will detect this and report these tests as skipped rather than failed. This behavior was added in version 0.37.0.\nFor TAP-based tests, skipped tests should print a single line starting with 1..0 # SKIP.\nIn addition, sometimes a test fails set up so that it should fail even if it is marked as an expected failure. The GNU standard approach in this case is to exit the program with error code 99. Again, Meson will detect this and report these tests as ERROR, ignoring the setting of should_fail. This behavior was added in version 0.50.0.\nThe goal of the meson test tool is to provide a simple way to run tests in a variety of different ways. The tool is designed to be run in the build directory.\nThe simplest thing to do is just to run all tests, which is equivalent to running ninja test.\nFor clarity, consider the meson.build containing:\nSpecify test(s) by name like:\nTests belonging to a suite suite can be run as follows\nSince version 0.46, (sub)project_name can be omitted if it is the top-level project.\nMultiple suites are specified like:\nNOTE: If you choose to specify both suite(s) and specific test name(s), the\ntest name(s) must be contained in the suite(s). This however is redundant--\nit would be more useful to specify either specific test names or suite(s).\nSometimes you need to run the tests multiple times, which is done like this:\nInvoking tests via a helper executable such as Valgrind can be done with the --wrap argument\nArguments to the wrapper binary can be given like this:\nMeson also supports running the tests under GDB. Just doing this:\nMeson will launch gdb all set up to run the test. Just type run in the GDB command prompt to start the program.\nThe second use case is a test that segfaults only rarely. In this case you can invoke the following command:\nThis runs the test up to 10 000 times under GDB automatically. If the program crashes, GDB will halt and the user can debug the application. Note that testing timeouts are disabled in this case so meson test will not kill gdb while the developer is still debugging it. The downside is that if the test binary freezes, the test runner will wait forever.\nSometimes, the GDB binary is not in the PATH variable or the user wants to use a GDB replacement. Therefore, the invoked GDB program can be specified (added 0.52.0):\nMeson will report the output produced by the failing tests along with other useful information as the environmental variables. This is useful, for example, when you run the tests on Travis-CI, Jenkins and the like.\nFor further information see the command line help of Meson by running meson test -h.\nIf meson test does not work for you, you likely have a old version of Meson.\nIn that case you should call mesontest instead. If mesontest doesn't work\neither you have a very old version prior to 0.37.0 and should upgrade.\n"});