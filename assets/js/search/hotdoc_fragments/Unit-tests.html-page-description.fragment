fragment_downloaded_cb({"url":"Unit-tests.html#page-description","fragment":"Meson comes with a fully functional unit test system. To use it simply build\nan executable and then use it in a test.\nYou can add as many tests as you want. They are run with the command ninja test.\nMeson captures the output of all tests and writes it in the log file\nmeson-logs/testlog.txt.\nSome tests require the use of command line arguments or environment\nvariables. These are simple to define.\nNote how you need to specify multiple values as an array.\nBy default, environment variable\nMALLOC_PERTURB_ is\nset to a random value between 1..255. This can help find memory leaks on\nconfigurations using glibc, including with non-GCC compilers. This feature\ncan be disabled as discussed in test().\nIf you enable coverage measurements by giving Meson the command line flag\n-Db_coverage=true, you can generate coverage reports after running the\ntests (running the tests is required to gather the list of functions that get\ncalled). Meson will autodetect what coverage generator tools you have\ninstalled and will generate the corresponding targets. These targets are\ncoverage-xml and coverage-text which are both provided by\nGcovr (version 3.3 or higher) and coverage-html, which\nrequires Lcov and\nGenHTML or Gcovr.\nAs a convenience, a high-level coverage target is also generated which will\nproduce all 3 coverage report types, if possible.\nThe output of these commands is written to the log directory meson-logs in\nyour build directory.\nTo reduce test times, Meson will by default run multiple unit tests in\nparallel. It is common to have some tests which can not be run in parallel\nbecause they require unique hold on some resource such as a file or a D-Bus\nname. You have to specify these tests with a keyword argument.\nMeson will then make sure that no other unit test is running at the same\ntime. Non-parallel tests take longer to run so it is recommended that you\nwrite your unit tests to be parallel executable whenever possible.\nBy default Meson uses as many concurrent processes as there are cores on the\ntest machine. You can override this with the environment variable\nMESON_TESTTHREADS like this.\n(added in version 0.52.0)\nTests can be assigned a priority that determines when a test is started.\nTests with higher priority are started first, tests with lower priority\nstarted later. The default priority is 0, meson makes no guarantee on the\nordering of tests with identical priority.\nNote that the test priority only affects the starting order of tests and\nsubsequent tests are affected by how long it takes previous tests to\ncomplete. It is thus possible that a higher-priority test is still running\nwhen lower-priority tests with a shorter runtime have completed.\nSometimes a test can only determine at runtime that it can not be run.\nFor the default exitcode testing protocol, the GNU standard approach in\nthis case is to exit the program with error code 77. Meson will detect this\nand report these tests as skipped rather than failed. This behavior was added\nin version 0.37.0.\nFor TAP-based tests, skipped tests should print a single line starting with\n1..0 # SKIP.\nIn addition, sometimes a test fails set up so that it should fail even if it\nis marked as an expected failure. The GNU standard approach in this case is\nto exit the program with error code 99. Again, Meson will detect this and\nreport these tests as ERROR, ignoring the setting of should_fail. This\nbehavior was added in version 0.50.0.\nThe goal of the meson test tool is to provide a simple way to run tests in a\nvariety of different ways. The tool is designed to be run in the build\ndirectory.\nThe simplest thing to do is just to run all tests, which is equivalent to\nrunning ninja test.\nFor clarity, consider the meson.build containing:\nSpecify test(s) by name like:\nTests belonging to a suite suite can be run as follows\nSince version 0.46, (sub)project_name can be omitted if it is the\ntop-level project.\nMultiple suites are specified like:\nNOTE: If you choose to specify both suite(s) and specific test name(s), the\ntest name(s) must be contained in the suite(s). This however is redundant--\nit would be more useful to specify either specific test names or suite(s).\nSometimes you need to run the tests multiple times, which is done like this:\nInvoking tests via a helper executable such as Valgrind can be done with the\n--wrap argument\nArguments to the wrapper binary can be given like this:\nMeson also supports running the tests under GDB. Just doing this:\nMeson will launch gdb all set up to run the test. Just type run in the\nGDB command prompt to start the program.\nThe second use case is a test that segfaults only rarely. In this case you\ncan invoke the following command:\nThis runs the test up to 10 000 times under GDB automatically. If the program\ncrashes, GDB will halt and the user can debug the application. Note that\ntesting timeouts are disabled in this case so meson test will not kill\ngdb while the developer is still debugging it. The downside is that if the\ntest binary freezes, the test runner will wait forever.\nSometimes, the GDB binary is not in the PATH variable or the user wants to\nuse a GDB replacement. Therefore, the invoked GDB program can be specified\n(added 0.52.0):\nMeson will report the output produced by the failing tests along with other\nuseful information as the environmental variables. This is useful, for\nexample, when you run the tests on Travis-CI, Jenkins and the like.\nFor further information see the command line help of Meson by running meson test -h.\nIf meson test does not work for you, you likely have a old version of\nMeson. In that case you should call mesontest instead. If mesontest\ndoesn't work either you have a very old version prior to 0.37.0 and should\nupgrade.\nMeson will write several different files with detailed results of running\ntests. These will be written into $builddir/meson-logs/\nThis is not a proper json file, but a file containing one valid json object\nper line. This is file is designed so each line is streamed out as each test\nis run, so it can be read as a stream while the test harness is running\nThis is a valid JUnit XML description of all tests run. It is not streamed\nout, and is written only once all tests complete running.\nWhen tests use the tap protocol each test will be recorded as a testsuite\ncontainer, with each case named by the number of the result.\nWhen tests use the gtest protocol meson will inject arguments to the test\nto generate it's own JUnit XML, which meson will include as part of this XML\nfile.\nNew in 0.55.0\n"});