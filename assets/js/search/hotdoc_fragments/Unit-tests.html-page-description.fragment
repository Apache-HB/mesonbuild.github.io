fragment_downloaded_cb({"url": "Unit-tests.html#page-description", "fragment": "Meson comes with a fully functional unit test system. To use it simply build an executable and then use it in a test. \nYou can add as many tests as you want. They are run with the command ninja test. \nMeson captures the output of all tests and writes it in the log file meson logs testlog.txt. \nSome tests require the use of command line arguments or environment variables. These are simple to define. \nNote how you need to specify multiple values as an array. \nIf you enable coverage measurements by giving Meson the command line flag Db_coverage true you can generate coverage reports. Meson will autodetect what coverage generator tools you have installed and will generate the corresponding targets. These targets are coverage xml and coverage text which are both provided by Gcovr version or higher and coverage html which requires Lcov and GenHTML or Gcovr. As a convenience a high level coverage target is also generated which will produce all coverage report types if possible. \nThe output of these commands is written to the log directory meson logs in your build directory. \nTo reduce test times Meson will by default run multiple unit tests in parallel. It is common to have some tests which can not be run in parallel because they require unique hold on some resource such as a file or a D Bus name. You have to specify these tests with a keyword argument. \nMeson will then make sure that no other unit test is running at the same time. Non parallel tests take longer to run so it is recommended that you write your unit tests to be parallel executable whenever possible. \nBy default Meson uses as many concurrent processes as there are cores on the test machine. You can override this with the environment variable MESON_TESTTHREADS like this. \nSometimes a test can only determine at runtime that it can not be run. \nFor the default exitcode testing protocol the GNU standard approach in this case is to exit the program with error code Meson will detect this and report these tests as skipped rather than failed. This behavior was added in version \nFor TAP based tests skipped tests should print a single line starting with SKIP. \nIn addition sometimes a test fails set up so that it should fail even if it is marked as an expected failure. The GNU standard approach in this case is to exit the program with error code Again Meson will detect this and report these tests as ERROR ignoring the setting of should_fail. This behavior was added in version \nThe goal of the meson test tool is to provide a simple way to run tests in a variety of different ways. The tool is designed to be run in the build directory. \nThe simplest thing to do is just to run all tests which is equivalent to running ninja test. \nYou can also run only a single test by giving its name \nTests belonging to a suite suite can be run as follows \nSince version sub project_name can be omitted if it is the top level project. \nSometimes you need to run the tests multiple times which is done like this \nInvoking tests via a helper executable such as Valgrind can be done with the wrap argument \nArguments to the wrapper binary can be given like this \nMeson also supports running the tests under GDB. Just doing this \nMeson will launch gdb all set up to run the test. Just type run in the GDB command prompt to start the program. \nThe second use case is a test that segfaults only rarely. In this case you can invoke the following command \nThis runs the test up to times under GDB automatically. If the program crashes GDB will halt and the user can debug the application. Note that testing timeouts are disabled in this case so meson test will not kill gdb while the developer is still debugging it. The downside is that if the test binary freezes the test runner will wait forever. \nMeson will report the output produced by the failing tests along with other useful informations as the environmental variables. This is useful for example when you run the tests on Travis CI Jenkins and the like. \nFor further information see the command line help of Meson by running meson test h. \nNOTE If meson test does not work for you you likely have a old version of Meson. In that case you should call mesontest instead. If mesontest doesn t work either you have a very old version prior to and should upgrade. \n"});