fragment_downloaded_cb({"url": "Gnome-module.html#page-description", "fragment": "This module provides helper tools for build operations needed when building Gnome GLib programs. \nNote the compilation commands here might not work properly when you change the source files. This is a bug in the respective compilers which do not expose the required dependency information. This has been reported upstream in this bug. Until this is fixed you need to be careful when changing your source files. \nTo use this module just do gnome import gnome The following functions will then be available as methods on the object with the name gnome. You can of course replace the name gnome with anything else. \nThis function compiles resources specified in an XML file into code that can be embedded inside the main binary. Similar a build target it takes two positional arguments. The first one is the name of the resource and the second is the XML file containing the resource definitions. If the name is foobar Meson will generate a header file called foobar.h which you can then include in your sources. \nReturns an array containing c_source header_file or gresource_bundle \nExample \nGenerates GObject introspection data. \nTakes one or more positional arguments \nEither one or more library objects you want to build gir data for or a single executable object. \nThere are several keyword arguments. Many of these map directly to the g ir scanner tool so see its documentation for more information. \nReturns an array of two elements which are gir_target typelib_target \nGenerates a marshal file using the glib genmarshal tool. The first argument is the basename of the output files. \nAdded \nReturns an array of two elements which are c_source header_file \nGenerates enum files for GObject using the glib mkenums tool. The first argument is the base name of the output files unless c_template and h_template are specified. In this case the output files will be the base name of the values passed as templates. \nThis method is essentially a wrapper around the glib mkenums tool s command line API. It is the most featureful method for enum creation. \nTypically you either provide template files or you specify the various template sections manually as strings. \nMost libraries and applications will be using the same standard template with only minor tweaks in which case the gnome.mkenums_simple convenience method can be used instead. \nNote that if you include the generated header in any of the sources for a build target you must add the generated header to the build target s list of sources to codify the dependency. This is true for all generated sources not just mkenums. \nAdded \nReturns an array of two elements which are c_source header_file \nGenerates enum c and h files for GObject using the glib mkenums tool with the standard template used by most GObject based C libraries. The first argument is the base name of the output files. \nNote that if you include the generated header in any of the sources for a build target you must add the generated header to the build target s list of sources to codify the dependency. This is true for all generated sources not just mkenums_simple. \nExample \nAdded \nReturns an array of two elements which are c_source header_file \nWhen called this method will compile the gschemas in the current directory. Note that this is not for installing schemas and is only useful when running the application locally for example during tests. \nCompiles the given XML schema into gdbus source code. Takes two positional arguments the first one specifies the base name to use while creating the output source and header and the second specifies one XML file. \nStarting this function returns a list of at least two custom targets in order one for the source code and one for the header. The list will contain a third custom target for the generated docbook files if that keyword argument is passed. \nEarlier versions return a single custom target representing all the outputs. Generally you should just add this list of targets to a top level target s source list. \nExample \nCreates a VAPI file from gir. The first argument is the name of the library. \nReturns a custom dependency that can be included when building other VAPI or Vala binaries. \nAdded \nInstalls help documentation using Yelp. The first argument is the project id. \nThis also creates two targets for translations help project update po and help project pot. \nNote that very old versions of yelp may not support symlinked media At least should work. \nAdded \nCompiles and installs gtkdoc documentation into prefix share gtk doc html. Takes one positional argument The name of the module. \nThis creates a module doc target that can be ran to build docs and normally these are only built on install. \nTakes as argument a module name and returns the path where that module s HTML files will be installed. Usually used with install_data to install extra files such as images to the output directory. \n"});