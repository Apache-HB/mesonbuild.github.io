fragment_downloaded_cb({"url": "Compiler-properties.html#page-description", "fragment": "Not all compilers and platforms are alike. Therefore Meson provides the tools to detect properties of the system during configure time. To get most of this information you first need to extract the compiler object from the main meson variable. \nHere we extract the C compiler. We could also have given the argument cpp to get the C compiler objc to get the objective C compiler and so on. The call is valid for all languages specified in the project declaration. Trying to obtain some other compiler will lead to an unrecoverable error. \nThis is a bit complex and more thoroughly explained on the page on cross compilation. But if you just want to know the operating system your code will run on issue this command \nThe compiler object has a method called get_id which returns a lower case string describing the family of the compiler. See reference tables for a list of supported compiler ids. \nSometimes the only way to test the system is to try to compile some sample code and see if it works. This is a two phase operation. First we define some code using the multiline string operator \nThen we can run the test. \nThe variable result will now contain either true or false depending on whether the compilation succeeded or not. The keyword argument name is optional. If it is specified Meson will write the result of the check to its log. \nSometimes it is necessary to check whether a certain code fragment not only compiles but also links successfully e.g. to check if a symbol is actually present in a library. This can be done using the links method on a compiler object like this \nThen we can run the test. \nThe variable result will now contain either true or false depending on whether the compilation and linking succeeded or not. The keyword argument name is optional. If it is specified Meson will write the result of the check to its log. \nHere is how you would compile and run a small test application. \nThe result variable encapsulates the state of the test which can be extracted with the following methods. The name keyword argument works the same as with compiles. \nHere is an example usage \nHeader files provided by different platforms vary quite a lot. Meson has functionality to detect whether a given header file is available on the system. The test is done by trying to compile a simple test program that includes the specified header. The following snippet describes how this feature can be used. \nOften you need to determine the size of a particular element such as int wchar_t or char Using the compiler variable mentioned above the check can be done like this. \nThis will put the size of wchar_t as reported by sizeof into variable wcharsize. The keyword argument prefix is optional. If specified its contents is put at the top of the source file. This argument is typically used for setting include directives in configuration files. \nIn older versions meson would error out if the size could not be determined. Since version it returns if the size could not be determined. \nJust having a header doesn t say anything about its contents. Sometimes you need to explicitly check if some function exists. This is how we would check whether the function open_memstream exists in header stdio.h \nNote that on macOS programs can be compiled targeting older macOS versions than the one that the program is compiled on. It can t be assumed that the OS version that is compiled on matches the OS version that the binary will run on. \nTherefore when detecting function availability with has_function it is important to specify the correct header in the prefix argument. \nIn the example above the function open_memstream is detected which was introduced in macOS When the user builds on macOS but targeting macOS mmacosx version min this will correctly report the function as missing. Without the header however it would lack the necessary availability information and incorrectly report the function as available. \nSome platforms have different standard structures. Here s how one would check if a struct called mystruct from header myheader.h contains a member called some_member. \nMost platforms can t access some data types at any address. For example it is common that a char can be at any address but a bit integer only at locations which are divisible by four. Determining the alignment of data types is simple. \nThis method tests if the compiler supports a given command line argument. This is implemented by compiling a small file with the given argument. \nNote some compilers silently swallow command line arguments they do not understand. Thus this test can not be made reliable. \n"});