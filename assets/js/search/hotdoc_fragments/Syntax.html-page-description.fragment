fragment_downloaded_cb({"url": "Syntax.html#page-description", "fragment": "The syntax of Meson s specification language has been kept as simple as possible. It is strongly typed so no object is ever converted to another under the covers. Variables have no visible type which makes Meson dynamically typed also known as duck typed \nThe main building blocks of the language are variables numbers booleans strings arrays function calls method calls if statements and includes. \nUsually one Meson statement takes just one line. There is no way to have multiple statements on one line as in e.g. C. Function and method calls argument lists can be split over multiple lines. Meson will autodetect this case and do the right thing. In other cases you can get multi line statements by ending the line with a Apart from line ending whitespace has no syntactic meaning. \nVariables in Meson work just like in other high level programming languages. A variable can contain a value of any type such as an integer or a string. Variables don t need to be predeclared you can just assign to them and they appear. Here s how you would assign values to two different variables. \nOne important difference in how variables work in Meson is that all objects are immutable. This is different from for example how Python works. \nMeson supports only integer numbers. They are declared simply by writing them out. Basic arithmetic operations are supported. \nHexadecimal literals are supported since version \nOctal and binary literals are supported since version \nStrings can be converted to a number like this \nA boolean is either true or false. \nStrings in Meson are declared with single quotes. To enter a literal single quote do it like this \nThe full list of escape sequences is \nAs in python and C up to three octal digits are accepted in ooo. \nStrings can be concatenated to form a new string using the symbol. \nStrings running over multiple lines can be declared with three single quotes like this \nThese are raw strings that do not support the escape sequences listed above. These strings can also be combined with the string formatting functionality described below. \nStrings can be built using the string formatting functionality. \nAs can be seen the formatting works by replacing placeholders of type number with the corresponding argument. \nStrings also support a number of other methods that return transformed copies. \nstrip \nto_upper to_lower \nto_int \ncontains startswith endswith \nsplit join \nunderscorify \nversion_compare \nArrays are delimited by brackets. An array can contain an arbitrary number of objects of any type. \nAccessing elements of an array can be done via array indexing \nYou can add more items to an array like this \nWhen adding a single item you do not need to enclose it in an array \nNote appending to an array will always create a new array object and assign it to my_array instead of modifying the original since all objects in Meson are immutable. \nSince you can check if an array contains an element like this \nThe following methods are defined for all arrays \nDictionaries are delimited by curly braces. A dictionary can contain an arbitrary number of key value pairs. Keys are required to be literal strings values can be objects of any type. \nKeys must be unique \nDictionaries are immutable. \nDictionaries are available since \nVisit the Reference Manual to read about the methods exposed by dictionaries. \nSince you can check if a dictionary contains a key like this \nMeson provides a set of usable functions. The most common use case is creating build objects. \nObjects can have methods which are called with the dot operator. The exact methods it provides depends on the object. \nIf statements work just like in other languages. \nMeson has the standard range of logical operations which can be used in if statements. \nLogical operations work only on boolean values. \nTo do an operation on all elements of an iterable use the foreach command. \nNote that Meson variables are immutable. Trying to assign a new value to the iterated object inside a foreach loop will not affect foreach s control flow. \nHere s an example of how you could define two executables with corresponding tests using arrays and foreach. \nHere s an example of you could iterate a set of components that should be compiled in according to some configuration. This uses a dictionary which is available since \nSince break and continue keywords can be used inside foreach loops. \nA comment starts with the character and extends until the end of the line. \nThe ternary operator works just like in other languages. \nThe only exception is that nested ternary operators are forbidden to improve legibility. If your branching needs are more complex than this you need to write an if else construct. \nMost source trees have multiple subdirectories to process. These can be handled by Meson s subdir command. It changes to the given subdirectory and executes the contents of meson.build in that subdirectory. All state variables etc are passed to and from the subdirectory. The effect is roughly the same as if the contents of the subdirectory s Meson file would have been written where the include command is. \nMeson does not currently support user defined functions or methods. The addition of user defined functions would make Meson Turing complete which would make it harder to reason about and more difficult to integrate with tools like IDEs. More details about this are in the FAQ. If because of this limitation you find yourself copying and pasting code a lot you may be able to use a foreach loop instead. \n"});