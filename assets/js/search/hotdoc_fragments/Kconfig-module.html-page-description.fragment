fragment_downloaded_cb({"url":"Kconfig-module.html#page-description","fragment":"This module parses Kconfig output files to allow use of kconfig\nconfigurations in meson projects.\nNote:Â this does not provide kconfig frontend tooling to generate a\nconfiguration. You still need something such as kconfig frontends (see\nlink below) to parse your Kconfig files, and then (after you've\nchosen the configuration options), output a \".config\" file.\nThe module may be imported as follows:\nThe following functions will then be available as methods on the object\nwith the name kconfig. You can, of course, replace the name\nkconfig with anything else.\nThis function loads a kconfig output file and returns a dictionary object.\nkconfig.load() makes no attempt at parsing the values in the\nfile.  Therefore, true boolean values will be represented as the string \"y\"\nand integer values will have to be converted with .to_int().\nKconfig frontends usually have \".config\" as the default name for the\nconfiguration file.  However, placing the configuration file in the source\ndirectory limits the user to one configuration per source directory.\nIn order to allow separate configurations for each build directory, as is\nthe Meson standard, meson.build should not hardcode \".config\" as the\nargument to kconfig.load(), and should instead make the argument to\nkconfig.load() a project build option.\nReturns: a dictionary object.\n\nThe first (and only) argument is the path to the configuration file to\nload (usually \".config\").\n\n"});