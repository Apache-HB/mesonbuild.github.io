fragment_downloaded_cb({"url":"Wrap-dependency-system-manual.html#page-description","fragment":"One of the major problems of multiplatform development is wrangling\nall your dependencies. This is easy on Linux where you can use system\npackages (and happen to know that your target distribution provides a\nrecent enough version of the dependency) but awkward on other\nplatforms. Most of those do not have a package manager at all. This\nhas been worked around by having third party package managers. They\nare not really a solution for end user deployment, because you can't\ntell them to install a package manager just to use your app. On these\nplatforms you must produce self-contained applications.\nThe traditional approach to this has been to bundle dependencies\ninside your own project. Either as prebuilt libraries and headers or\nby embedding the source code inside your source tree and rewriting\nyour build system to build them as part of your project.\nThis is both tedious and error prone because it is always done by\nhand. The Wrap dependency system of Meson aims to provide an automated\nway to do this.\nMeson has a concept of subprojects. They are a way\nof nesting one Meson project inside another. Any project that builds\nwith Meson can detect that it is built as a subproject and build\nitself in a way that makes it easy to use (usually this means as a\nstatic library).\nTo use this kind of a project as a dependency you could just copy and\nextract it inside your project's subprojects directory.\nHowever there is a simpler way. You can specify a Wrap file that tells Meson\nhow to download it for you. If you then use this subproject in your build,\nMeson will automatically download and extract it during build. This makes\nsubproject embedding extremely easy.\nAll wrap files must have a name of <project_name>.wrap form and be in subprojects dir.\nCurrently Meson has four kinds of wraps:\nWrap files are written in ini format, with a single header containing the type\nof wrap, followed by properties describing how to obtain the sources, validate\nthem, and modify them if needed. An example wrap-file for the wrap named\nlibfoobar would have a filename libfoobar.wrap and would look like this:\nAn example wrap-git will look like this:\nSince 0.49.0 if source_filename or patch_filename is found in the\nproject's subprojects/packagecache directory, it will be used instead\nof downloading the file, even if --wrap-mode option is set to\nnodownload. The file's hash will be checked.\nUnfortunately most software projects in the world do not build with\nMeson. Because of this Meson allows you to specify a patch URL.\nFor historic reasons this is called a \"patch\", however, it serves as an\noverlay to add or replace files rather than modifying them. The file\nmust be an archive; it is downloaded and automatically extracted into\nthe subproject. The extracted files will include a meson build\ndefinition for the given subproject.\nThis approach makes it extremely simple to embed dependencies that\nrequire build system changes. You can write the Meson build definition\nfor the dependency in total isolation. This is a lot better than doing\nit inside your own source tree, especially if it contains hundreds of\nthousands of lines of code. Once you have a working build definition,\njust zip up the Meson build files (and others you have changed) and\nput them somewhere where you can download them.\nMeson build patches are only supported for wrap-file mode. When using\nwrap-git, the repository must contain all Meson build definitions.\nWraps provide a convenient way of obtaining a project into your subproject directory.\nThen you use it as a regular subproject (see subprojects).\nUsually you don't want to write your wraps by hand.\nThere is an online repository called WrapDB that provides\nmany dependencies ready to use. You can read more about WrapDB here.\nThere is also a Meson subcommand to get and manage wraps (see using wraptool).\n\nwrap-file\nwrap-git\nwrap-hg\nwrap-svn\n\n\n\ndirectory - name of the subproject root directory, defaults to the name of the wrap.\n\n\n\nsource_url - download url to retrieve the wrap-file source archive\n\nsource_filename - filename of the downloaded source archive\n\nsource_hash - sha256 checksum of the downloaded source archive\n\npatch_url - download url to retrieve an optional overlay archive\n\npatch_filename - filename of the downloaded overlay archive\n\npatch_hash - sha256 checksum of the downloaded overlay archive\n\nlead_directory_missing - for wrap-file create the leading\ndirectory name. Needed when the source file does not have a leading\ndirectory.\n\n\n\nurl - name of the wrap-git repository to clone. Required.\n\nrevision - name of the revision to checkout. Must be either: a\nvalid value (such as a git tag) for the VCS's checkout command, or\n(for git) head to track upstream's default branch. Required.\n\n\n\ndepth - shallowly clone the repository to X number of commits. Note\nthat git always allow shallowly cloning branches, but in order to\nclone commit ids shallowly, the server must support\nuploadpack.allowReachableSHA1InWant=true.  (since 0.52.0)\n\n\npush-url - alternative url to configure as a git push-url. Useful if\nthe subproject will be developed and changes pushed upstream.\n(since 0.37.0)\n\n\nclone-recursive - also clone submodules of the repository\n(since 0.48.0)\n\n\n"});