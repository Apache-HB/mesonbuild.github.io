fragment_downloaded_cb({"url": "Wrap-dependency-system-manual.html#page-description", "fragment": "One of the major problems of multiplatform development is wrangling all your dependencies. This is easy on Linux where you can use system packages but awkward on other platforms. Most of those do not have a package manager at all. This has been worked around by having third party package managers. They are not really a solution for end user deployment because you can t tell them to install a package manager just to use your app. On these platforms you must produce self contained applications. \nThe traditional approach to this has been to bundle dependencies inside your own project. Either as prebuilt libraries and headers or by embedding the source code inside your source tree and rewriting your build system to build them as part of your project. \nThis is both tedious and error prone because it is always done by hand. The Wrap dependency system of Meson aims to provide an automated way to do this. \nMeson has a concept of subprojects. They are a way of nesting one Meson project inside another. Any project that builds with Meson can detect that it is built as a subproject and build itself in a way that makes it easy to use usually this means as a static library \nTo use this kind of a project as a dependency you could just copy and extract it inside your project s subprojects directory. \nHowever there is a simpler way. You can specify a Wrap file that tells Meson how to download it for you. If you then use this subproject in your build Meson will automatically download and extract it during build. This makes subproject embedding extremely easy. \nAll wrap files must have a name of project_name wrap form and be in subprojects dir. \nCurrently Meson has three kinds of wraps \nAn example wrap file for libfoobar would have a name libfoobar.wrap and would look like this \nsource_hash is sha256sum of source_filename. \nSince if source_filename is found in project s subprojects packagecache directory it will be used instead of downloading the source even if wrap mode option is set to nodownload. The file s hash will be checked. \nUnfortunately most software projects in the world do not build with Meson. Because of this Meson allows you to specify a patch URL. This works in much the same way as Debian s distro patches. That is they are downloaded and automatically applied to the subproject. These files contain a Meson build definition for the given subproject. \nA wrap file with an additional patch URL would look like this \nIn this example the Wrap manager would download the patch and unzip it in libfoobar s directory. \nThis approach makes it extremely simple to embed dependencies that require build system changes. You can write the Meson build definition for the dependency in total isolation. This is a lot better than doing it inside your own source tree especially if it contains hundreds of thousands of lines of code. Once you have a working build definition just zip up the Meson build files and others you have changed and put them somewhere where you can download them. \nSince if patch_filename is found in project s subprojects packagecache directory it will be used instead of downloading the patch even if wrap mode option is set to nodownload. The file s hash will be checked. \nThis type of wrap allows branching subprojects directly from git. \nThe above mentioned scheme assumes that your subproject is working off packaged files. Sometimes you want to check code out directly from Git. Meson supports this natively. All you need to do is to write a slightly different wrap file. \nThe format is straightforward. The only thing to note is the revision element that can have one of two values. The first is head which will cause Meson to track the master head doing a repull whenever the build definition is altered The second type is a commit hash or a tag. In this case Meson will use the commit specified with git checkout hash tag id \nNote that in this case you cannot specify an extra patch file to use. The git repo must contain all necessary Meson build definitions. \nUsually you would use subprojects as read only. However in some cases you want to do commits to subprojects and push them upstream. For these cases you can specify the upload URL by adding the following at the end of your wrap file \nIf the git repo contains submodules you can tell Meson to clone them automatically by adding the following since \nWraps provide a convenient way of obtaining a project into your subproject directory. Then you use it as a regular subproject see subprojects \nUsually you don t want to write your wraps by hand. \nThere is an online repository called WrapDB that provides many dependencies ready to use. You can read more about WrapDB here. \nThere is also a Meson subcommand to get and manage wraps see using wraptool \n"});