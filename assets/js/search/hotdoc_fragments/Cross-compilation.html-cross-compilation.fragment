fragment_downloaded_cb({"url": "Cross-compilation.html#cross-compilation", "fragment": "Cross compilation \nMeson has full support for cross compilation. Since cross compiling is more complicated than native building let s first go over some nomenclature. The three most important definitions are traditionally called build host and target. This is confusing because those terms are used for quite many different things. To simplify the issue we are going to call these the build machine host machine and target machine. Their definitions are the following \nThe tl dr summary is the following if you are doing regular cross compilation you only care about build_machine and host_machine. Just ignore target_machine altogether and you will be correct of the time. Only compilers and similar tools care about the target machine. In fact for so called multi target tools the target machine need not be fixed at build time like the others but chosen at runtime so target_machine still doesn t matter. If your needs are more complex or you are interested in the actual details do read on. \nThis might be easier to understand through examples. Let s start with the regular not cross compiling case. In these cases all of these three machines are the same. Simple so far. \nLet s next look at the most common cross compilation setup. Let s suppose you are on a bit OSX machine and you are cross compiling a binary that will run on a bit ARM Linux board. In this case your build machine is bit OSX and both your host and target machines are bit ARM Linux. This should be quite understandable as well. \nIt gets a bit trickier when we think about how the cross compiler was generated. It was built and it runs on a specific platform but the output it generates is for a different platform. In this case build and host machines are the same but target machine is different. \nThe most complicated case is when you cross compile a cross compiler. As an example you can on a Linux machine generate a cross compiler that runs on Windows but produces binaries on MIPS Linux. In this case build machine is x86 Linux host machine is x86 Windows and target machine is MIPS Linux. This setup is known as the Canadian Cross. As a side note be careful when reading cross compilation articles on Wikipedia or the net in general. It is very common for them to get build host and target mixed up even in consecutive sentences which can leave you puzzled until you figure it out. \nA lot of confusion stems from the fact that when you cross compile something the systems build host and target used when building the cross compiler don t align with the ones used when building something with that newly built cross compiler. To take our Canadian Cross scenario from above for full generality since its host machine is x86 Windows the build machine of anything we build with it is x86 Windows. And since its target machine is MIPS Linux the host machine of anything we build with it is MIPS Linux. Only the target machine of whatever we build with it can be freely chosen by us say if we want to build another cross compiler that runs on MIPS Linux and targets Aarch64 iOS. As this example hopefully makes clear to you the platforms are shifted over to the left by one position. \nIf you did not understand all of the details don t worry. For most people it takes a while to wrap their head around these concepts. Don t panic it might take a while to click but you will get the hang of it eventually. \n"});