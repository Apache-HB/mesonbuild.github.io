fragment_downloaded_cb({"url": "Python-module.html#page-description", "fragment": "This module provides support for finding and building extensions against python installations be they python or \nAdded \nFind a python installation matching name_or_path. \nThat argument is optional if not provided then the returned python installation will be the one used to run meson. \nIf provided it can be \nA simple name eg python meson will look for an external program named that way using find_program \nA path eg usr local bin python3.4m \nOne of python2 or python3 in either case the module will try some alternative names py or py on Windows and python everywhere. In the latter case it will check whether the version provided by the sysconfig module matches the required major version \nKeyword arguments are the following \nReturns a python installation \nThe python_installation object is an external program with several added methods. \nAdded \nWorks like the path method of other ExternalProgram objects. Was not provided prior to due to a bug. \nCreate a shared_module target that is named according to the naming conventions of the target platform. \nAll positional and keyword arguments are the same as for shared_module excluding name_suffix and name_prefix and with the addition of the following \nextension_module does not add any dependencies to the library so user may need to add dependencies py_installation.dependency see dependency \nReturns a buildtarget object \nThis method accepts the same arguments as the standard dependency function. \nReturns a python dependency \nInstall actual python sources py \nAll positional and keyword arguments are the same as for install_data with the addition of the following \npure On some platforms architecture independent files are expected to be placed in a separate directory. However if the python sources should be installed alongside an extension module built with this module this keyword argument can be used to override that behaviour. Defaults to true \nsubdir See documentation for the argument of the same name to extension_module \nRetrieve the directory install_sources will install to. \nIt can be useful in cases where install_sources cannot be used directly for example when using configure_file. \nThis function accepts no arguments its keyword arguments are the same as install_sources \nReturns A string \nGet the major.minor python version eg \nThe version is obtained through the sysconfig module. \nThis function expects no arguments or keyword arguments. \nReturns A string \nGet a path as defined by the sysconfig module. \nFor example \nThis function requires at least one argument path_name which is expected to be a non empty string. \nIf fallback is specified it will be returned if no path with the given name exists. Otherwise attempting to read a non existing path will cause a fatal error. \nReturns A string \nReturns true if a path named path_name can be retrieved with get_path false otherwise. \nGet a variable as defined by the sysconfig module. \nFor example \nThis function requires at least one argument variable_name which is expected to be a non empty string. \nIf fallback is specified it will be returned if no variable with the given name exists. Otherwise attempting to read a non existing variable will cause a fatal error. \nReturns A string \nReturns true if a variable named variable_name can be retrieved with get_variable false otherwise. \nThis dependency object subclass will try various methods to obtain the compiler and linker arguments starting with pkg config then potentially using information obtained from python s sysconfig module. \nIt exposes the same methods as its parent class. \n"});