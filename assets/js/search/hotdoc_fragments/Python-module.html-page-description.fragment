fragment_downloaded_cb({"url":"Python-module.html#page-description","fragment":"This module provides support for finding and building extensions against\npython installations, be they python 2 or 3.\nAdded 0.46.0\nFind a python installation matching name_or_path.\nThat argument is optional, if not provided then the returned python\ninstallation will be the one used to run meson.\nIf provided, it can be:\nA simple name, eg python-2.7, meson will look for an external program\nnamed that way, using find_program\nA path, eg /usr/local/bin/python3.4m\nOne of python2 or python3: in either case, the module will try some\nalternative names: py -2 or py -3 on Windows, and python everywhere.\nIn the latter case, it will check whether the version provided by the\nsysconfig module matches the required major version\nKeyword arguments are the following:\nReturns: a python installation\nThe python_installation object is an external program, with several\nadded methods.\nAdded 0.50.0\nWorks like the path method of other ExternalProgram objects. Was not\nprovided prior to 0.50.0 due to a bug.\nCreate a shared_module target that is named according to the naming\nconventions of the target platform.\nAll positional and keyword arguments are the same as for shared_module,\nexcluding name_suffix and name_prefix, and with the addition of the following:\nextension_module does not add any dependencies to the library so user may\nneed to add dependencies : py_installation.dependency(), see dependency().\nReturns: a buildtarget object\nThis method accepts no positional arguments, and the same keyword arguments as\nthe standard dependency function. It also supports the following keyword\nargument:\nReturns: a python dependency\nInstall actual python sources (.py).\nAll positional and keyword arguments are the same as for install_data,\nwith the addition of the following:\npure: On some platforms, architecture independent files are expected\nto be placed in a separate directory. However, if the python sources\nshould be installed alongside an extension module built with this\nmodule, this keyword argument can be used to override that behaviour.\nDefaults to true\nsubdir: See documentation for the argument of the same name to\nextension_module()\nRetrieve the directory install_sources() will install to.\nIt can be useful in cases where install_sources cannot be used directly,\nfor example when using configure_file.\nThis function accepts no arguments, its keyword arguments are the same\nas install_sources().\nReturns: A string\nGet the major.minor python version, eg 2.7.\nThe version is obtained through the sysconfig module.\nThis function expects no arguments or keyword arguments.\nReturns: A string\nGet a path as defined by the sysconfig module.\nFor example:\nThis function requires at least one argument, path_name,\nwhich is expected to be a non-empty string.\nIf fallback is specified, it will be returned if no path\nwith the given name exists. Otherwise, attempting to read\na non-existing path will cause a fatal error.\nReturns: A string\nReturns: true if a path named path_name can be retrieved with\nget_path(), false otherwise.\nGet a variable as defined by the sysconfig module.\nFor example:\nThis function requires at least one argument, variable_name,\nwhich is expected to be a non-empty string.\nIf fallback is specified, it will be returned if no variable\nwith the given name exists. Otherwise, attempting to read\na non-existing variable will cause a fatal error.\nReturns: A string\nReturns: true if a variable named variable_name can be retrieved with\nget_variable(), false otherwise.\nThis dependency object subclass will try various methods to obtain the\ncompiler and linker arguments, starting with pkg-config then potentially\nusing information obtained from python's sysconfig module.\nIt exposes the same methods as its parent class.\n\n\nA simple name, eg python-2.7, meson will look for an external program\nnamed that way, using find_program\n\n\nA path, eg /usr/local/bin/python3.4m\n\n\nOne of python2 or python3: in either case, the module will try some\nalternative names: py -2 or py -3 on Windows, and python everywhere.\nIn the latter case, it will check whether the version provided by the\nsysconfig module matches the required major version\n\n\n\n\nrequired: by default, required is set to true and Meson will\nabort if no python installation can be found. If required is set to false,\nMeson will continue even if no python installation was found. You can\nthen use the .found() method on the returned object to check\nwhether it was found or not. Since 0.48.0  the value of a\nfeature option can also be passed to the\nrequired keyword argument.\n\ndisabler: if true and no python installation can be found, return a\ndisabler object instead of a not-found object.\nSince 0.49.0\n\n\nmodules: a list of module names that this python installation must have.\nSince 0.51.0\n\n\n\n\nsubdir: By default, meson will install the extension module in\nthe relevant top-level location for the python installation, eg\n/usr/lib/site-packages. When subdir is passed to this method,\nit will be appended to that location. This keyword argument is\nmutually exclusive with install_dir\n\n\n\n\nembed: (since 0.53.0) If true, meson will try to find a python dependency\nthat can be used for embedding python into an application.\n\n\n\npure: On some platforms, architecture independent files are expected\nto be placed in a separate directory. However, if the python sources\nshould be installed alongside an extension module built with this\nmodule, this keyword argument can be used to override that behaviour.\nDefaults to true\n\n\nsubdir: See documentation for the argument of the same name to\nextension_module()\n\n\n"});