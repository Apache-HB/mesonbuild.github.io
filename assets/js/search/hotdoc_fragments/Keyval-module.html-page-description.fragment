fragment_downloaded_cb({"url":"Keyval-module.html#page-description","fragment":"This module parses files consisting of a series of key=value lines.  One use\nof this module is to load kconfig configurations in meson projects.\nNote:Â this does not provide kconfig frontend tooling to generate a\nconfiguration. You still need something such as kconfig frontends (see\nlink below) to parse your Kconfig files, and then (after you've\nchosen the configuration options), output a \".config\" file.\nThe module may be imported as follows:\nThe following functions will then be available as methods on the object\nwith the name keyval. You can, of course, replace the name\nkeyval with anything else.\nThis function loads a file consisting of a series of key=value lines\nand returns a dictionary object.\nkeyval.load() makes no attempt at parsing the values in the file.\nIn particular boolean and integer values will be represented as strings,\nand strings will keep any quoting that is present in the input file.  It\ncan be useful to create a configuration_data()\nobject from the dictionary and use methods such as get_unquoted().\nKconfig frontends usually have \".config\" as the default name for the\nconfiguration file.  However, placing the configuration file in the source\ndirectory limits the user to one configuration per source directory.\nIn order to allow separate configurations for each build directory, as is\nthe Meson standard, meson.build should not hardcode \".config\" as the\nargument to kconfig.load(), and should instead make the argument to\nkconfig.load() a project build option.\nReturns: a dictionary object.\n\nThe first (and only) argument is the path to the configuration file to\nload (usually \".config\").\n\n"});