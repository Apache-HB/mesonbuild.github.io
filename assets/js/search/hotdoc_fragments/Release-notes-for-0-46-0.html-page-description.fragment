fragment_downloaded_cb({"url":"Release-notes-for-0-46-0.html#page-description","fragment":"Added the function subdir_done(). Its invocation exits the current script at\nthe point of invocation. All previously invoked build targets and commands are\nbuild/executed. All following ones are ignored. If the current script was\ninvoked via subdir() the parent script continues normally.\nThe format of some human-readable diagnostic messages has changed in\nminor ways. In case you are parsing these messages, you may need to\nadjust your code.\nCross-compilation is now supported for ARM targets using ARM compiler - ARMCC.\nThe current implementation does not support shareable libraries.\nThe default extension of the output is .axf.\nThe environment path should be set properly for the ARM compiler executables.\nThe '--cpu' option with the appropriate target type should be mentioned\nin the cross file as shown in the snippet below.\nA new function both_libraries() has been added to build both shared and static\nlibraries at the same time. Source files will be compiled only once and object\nfiles will be reused to build both shared and static libraries, unless\nb_staticpic user option or pic: keyword argument are set to false in which\ncase sources will be compiled twice.\nThe returned buildtarget object always represents the shared library.\nThis can be used to run the current compiler with the specified arguments\nto obtain additional information from it.\nOne of the use cases is to get the location of development files for the\nGCC plugins:\ndeclare_dependency() now supports the link_whole: keyword argument which\ntransparently works for build targets which use that dependency.\nThe old executable names mesonintrospect, mesonconf, mesonrewriter\nand mesontest have been deprecated for a long time. Starting from\nthis version they no longer do anything but instead always error\nout. All functionality is available as subcommands in the main meson\nbinary.\nPreviously meson required that builtin arguments (like prefix) be passed as\n--prefix to meson and -Dprefix to meson configure. meson now accepts -D\nform like meson configure has. meson configure also accepts the --prefix\nform, like meson has.\nThe recursive: keyword argument has been added to extract_all_objects(). When set\nto true it will also return objects passed to the objects: argument of this\ntarget. By default only objects built for this target are returned to maintain\nbackward compatibility with previous versions. The default will eventually be\nchanged to true in a future version.\nIt is now possible to override the result of find_program to point\nto a custom program you want. The overriding is global and applies to\nevery subproject from there on. Here is how you would use it.\nIn master project\nIn the called subproject:\nIn master project (or, in fact, any subproject):\nNow genprog points to the custom script. If the dependency had come\nfrom the system, then it would point to the system version.\nYou can also use the return value of configure_file() to override\na program in the same way as above:\nA new set of methods has been added to compiler objects\nto test if the linker supports given arguments.\nCommand line parsing is now less surprising. \"meson help\" is now\nequivalent to \"meson --help\" and \"meson help \" is\nequivalent to \"meson  --help\", instead of creating a build\ndirectory called \"help\" in these cases.\nA feature to generate a meson.build file compiling given C/C++ source\nfiles into a single executable has been added to \"meson init\". By\ndefault, it will take all recognizable source files in the current\ndirectory.  You can also specify a list of dependencies with the -d\nflag and automatically invoke a build with the -b flag to check if the\ncode builds with those dependencies.\nFor example,\nwill look for C or C++ files in the current directory, generate a\nmeson.build for them with the dependencies of sdl2 and gl and\nimmediately try to build it, overwriting any previous meson.build and\nbuild directory.\nThe rename: keyword argument is used to change names of the installed\nfiles. Here's how you install and rename the following files:\nIn this version, a support for lcc compiler for Elbrus processors\nbased on e2k microarchitecture\nhas been added.\nExamples of such CPUs:\nSuch compiler have a similar behavior as gcc (basic option compatibility),\nbut, in is not strictly compatible with gcc as of current version.\nMajor differences as of version 1.21.22:\nSo every noted difference is properly handled now in meson.\nSingle-quoted strings in meson have been taught the same set of escape\nsequences as in Python. It is therefore now possible to use arbitrary bytes in\nstrings, like for example NUL (\\0) and other ASCII control characters. See\nthe chapter about Strings in Syntax for more\ndetails.\nPotential backwards compatibility issue: Any valid escape sequence according to\nthe new rules will be interpreted as an escape sequence instead of the literal\ncharacters. Previously only the following escape sequences were supported in\nsingle-quote strings: \\', \\\\ and \\n.\nNote that the behaviour of triple-quoted (multiline) strings has not changed.\nThey behave like raw strings and do not support any escape sequences.\nA new wrap mode was added, --wrap-mode=forcefallback. When this is set,\ndependencies for which a fallback was provided will always use it, even\nif an external dependency exists and satisfies the version requirements.\nIn earlier versions of Meson you could only have one target of a given name for each type.\nFor example you could not have two executables named foo. This requirement is now\nrelaxed so that you can have multiple targets with the same name, as long as they are in\ndifferent subdirectories.\nNote that projects that have multiple targets with the same name can not be built with\nthe flat layout or any backend that writes outputs in the same directory.\nAn OpenMP dependency (openmp) has been added that encapsulates the various\nflags used by compilers to enable OpenMP and checks for the existence of the\nomp.h header. The language keyword may be passed to force the use of a\nspecific compiler for the checks.\nIt is now possible to use only part of a dependency in a target. This allows,\nfor example, to only use headers with convenience libraries to avoid linking\nto the same library multiple times.\nA partial dependency will have the same name version as the full dependency it\nis derived from, as well as any values requested.\nPreviously pkg-config files generated by the pkgconfig modules for static libraries\nwith dependencies could only be used in a dependencies with static: true.\nNow the generated file contains the needed dependencies libraries directly within\nRequires and Libs for build static libraries passed via the libraries keyword\nargument.\nProjects that install both a static and a shared version of a library should use\nthe result of both_libraries() to the\npkg-config file generator or use configure_file()\nfor more complicated setups.\nA StaticLibrary or SharedLibrary object can optionally be passed\nas first positional argument of the generate() method. If one is provided a\ndefault value will be provided for all required fields of the pc file:\nGenerating a .pc file is now as simple as:\npkgconfig.generate() requires: and requires_private: keyword arguments\nnow accept pkgconfig-dependencies and libraries that pkgconfig-files were\ngenerated for.\nMeson now has is a revamped and generic (python 2 and 3) version of the python3\nmodule. With this new interface, projects can now fully\nspecify the version of python they want to build against / install sources to,\nand can do so against multiple major or minor versions in parallel.\nBuild targets and custom targets can be listed in the depends: keyword argument\nof test function. These targets will be built before test is run even if they have\nbuild_by_default : false.\n\nhas_link_argument()\nhas_multi_link_arguments()\nget_supported_link_arguments()\nfirst_supported_link_argument()\n\n\n\nfile1.txt into share/myapp/dir1/data.txt\n\n\nfile2.txt into share/myapp/dir2/data.txt\n\n\n\n\nElbrus-8S;\nElbrus-4S;\n\nElbrus-2S+.\n\n\nit does not support LTO and PCH;\nit suffers from the same dependency file creation error as icc;\nit has minor differences in output, especially version output;\nit differently reacts to lchmod() detection;\nsome backend messages are produced in ru_RU.KOI8-R even if LANG=C;\nits preprocessor treats some characters differently.\n\n\n\ninstall_dir is set to pkgconfig folder in the same location than the provided library.\n\ndescription is set to the project's name followed by the library's name.\n\nname is set to the library's name.\n\n"});