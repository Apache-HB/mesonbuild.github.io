fragment_downloaded_cb({"url":"SourceSet-module.html#page-description","fragment":"This module provides support for building many targets against a single set\nof files; the choice of which files to include in each target depends on the\ncontents of a dictionary or a configuration_data object.  The module can\nbe loaded with:\nA simple example of using the module looks like this:\nand it would be equivalent to\nSourcesets can be used with a single invocation of the apply method,\nsimilar to the example above, but the module is especially useful\nwhen multiple executables are generated by applying the same rules to\nmany different configurations.\nAdded 0.51.0\nCreate and return a new source set object.\nReturns: a source set\nThe source_set object provides methods to add files to a source set and\nto query it.  The source set becomes immutable after any method but add\nis called.\nAdd a rule to a source set.  A rule determines the conditions under which\nsome source files or dependency objects are included in a build configuration.\nAll source files must be present in the source tree or they can be created\nin the build tree via configure_file, custom_target or generator.\nvarnames_and_deps is a list of conditions for the rule, which can be\neither strings or dependency objects (a dependency object is anything that\nhas a found() method).  If all the strings evaluate to true and all\ndependencies are found, the rule will evaluate to true; apply()\nwill then include the contents of the if_true keyword argument in its\nresult.  Otherwise, that is if any of the strings in the positional\narguments evaluate to false or any dependency is not found, apply()\nwill instead use the contents of the if_false keyword argument.\nDependencies can also appear in sources_and_deps.  In this case, a\nmissing dependency will simply be ignored and will not disable the rule,\nsimilar to how the dependencies keyword argument works in build targets.\nNote: It is generally better to avoid mixing source sets and disablers.\nThis is because disablers will cause the rule to be dropped altogether,\nand the list_of_alt_sources would not be taken into account anymore.\nAdd one or more source sets to another.\nFor each source set listed in the arguments, apply() will\nconsider their rules only if the conditions in varnames_and_deps are\nevaluated positively.  For example, the following:\nis equivalent to:\nReturns a list of all sources that were placed in the source set using\nadd (including nested source sets) and that do not have a not-found\ndependency.  If a rule has a not-found dependency, only the if_false\nsources are included (if any).\nReturns: a list of file objects\nMatch the source set against a dictionary or a configuration_data object\nand return a source configuration object.  A source configuration object\nallows you to retrieve the sources and dependencies for a specific configuration.\nBy default, all the variables that were specified in the rules have to\nbe present in conf_data.  However, in some cases the convention is\nthat false configuration symbols are absent in conf_data; this is\nthe case for example when the configuration was loaded from a Kconfig file.\nIn that case you can specify the strict: false keyword argument, which\nwill treat absent variables as false.\nReturns: a source configuration\nThe source_configuration object provides methods to query the result of an\napply operation on a source set.\nReturn the source files corresponding to the applied configuration.\nReturns: a list of file objects\nReturn the dependencies corresponding to the applied configuration.\nReturns: a list of dependency objects\n"});