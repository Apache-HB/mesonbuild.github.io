fragment_downloaded_cb({"url":"Comparisons.html#page-description","fragment":"A common question is Why should I choose Meson over a different build\nsystem X? There is no one true answer to this as it depends on the\nuse case. Almost all build systems have all the functionality needed\nto build medium-to-large projects so the decision is usually made on\nother points. Here we list some pros and cons of various build systems\nto help you do the decision yourself.\nExcellent support for legacy Unix platforms, large selection of\nexisting modules.\nNeedlessly slow, complicated, hard to use correctly, unreliable,\npainful to debug, incomprehensible for most people, poor support for\nnon-Unix platforms (especially Windows).\nGreat support for multiple backends (Visual Studio, XCode, etc).\nThe scripting language is cumbersome to work with. Some simple things\nare more complicated than necessary.\nFull power of Python available for defining your build.\nSlow. Requires you to pass your configuration settings on every\ninvocation. That is, if you do scons OPT1 OPT2 and then just\nscons, it will reconfigure everything without settings OPT1 and\nOPT2. Every other build system remembers build options from the\nprevious invocation.\nProven to scale to very large projects.\nImplemented in Java. Poor Windows support. Heavily focused on Google's\nway of doing things (which may be a good or a bad thing). Contributing\ncode requires signing a CLA.\nThe fastest build system see\nmeasurements, user friendly, designed to\nbe as invisible to the developer as possible, native support for\nmodern tools (precompiled headers, coverage, Valgrind etc). Not Turing\ncomplete so build definition files are easy to read and understand.\nRelatively new so it does not have a large user base yet, and may thus\ncontain some unknown bugs. Visual Studio and XCode backends not as\nhigh quality as Ninja one.\n"});