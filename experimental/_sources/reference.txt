####################################
Reference manual
####################################


This page lists functions and methods available in Meson scripts. For
more in-depth documentation on how to use them, refer to the
:doc:`/manual`. For more basic information about how Meson works,
take a look at the :doc:`/syntax`.

Functions
=========

The following functions are available in build files. Click on each to
see the description and usage.

.. function:: add_global_arguments(arg1, arg2, ...)

   Adds the positional arguments to the compiler command line for the
   language specified in `language` keyword argument. Note that there
   is no way to remove an argument set in this way. If you have an
   argument that is only used in a subset of targets, you have to
   specify it in per-target flags.
   
   The arguments are used in all compiler invocations with the exception
   of compile tests, because you might need to run a compile test with
   and without the argument in question. For this reason only the
   arguments explicitly specified are used during compile tests.

   **Note:** Usually you should use ``add_project_arguments`` instead,
    because that works even when you project is used as a subproject.

   **Note:** You must pass always arguments individually ``arg1, arg2,  ...`` rather than as a string ``'arg1 arg2', ...``

Objects
=======

   
.. class:: build_machine

   Provides information about the build machine â€” the machine that is
   doing the actual compilation. See :doc:`/crosscompilation`. It has the
   following methods:

.. method:: cpu_family()

   returns the CPU family name. Guaranteed to
   return `x86` for 32-bit userland on x86 CPUs, `x86_64` for
   64-bit userland on x86 CPUs, `arm` for 32-bit userland on
   all ARM CPUs, etc.

.. method:: cpu()

   returns a more specific CPU name, such as `i686`, `amd64`, etc

If you think the returned values for any of these are incorrect for
your system or CPU, please file `a bug report
<https://github.com/mesonbuild/meson/issues/new>`_.

